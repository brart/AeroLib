Var
  EB_targetLoc: String;
  EB_statueA,EB_statueB,
  EB_statueC : Integer;
  EB_Stage : Integer = 0;
  EB_net,EB_rawFish,
  EB_cookedFish : TItem;

Procedure EB_freeARDTMS();
begin
  freeDTM(EB_statueA);
  freeDTM(EB_statueB);
  freeDTM(EB_statueC);
  freeDTM(EB_net.DTM);
  freeDTM(EB_rawFish.DTM);
  freeDTM(EB_cookedFish.DTM);
end;

Procedure EB_setup();
begin
  EB_statueA        := DTMFromString('m6wAAAHic42ZgYDgGxNuBeDMQbwXii0B8BYiPAPEhIN4LVXMGiNkZGRj+QmkhIP4PZHMDaUEg/gZkvwLih0D8AojPrvNieHE8meH1uRqGR/sDGfYucGY4ssyN4eYOP4br23zB+MnBIIbFXVYMckD1xGImEjASAADNOiPw');
  EB_statueB        := DTMFromString('mwQAAAHic42RgYGBhZGD4C6RZgTQPEDMCMQcjhM8GpXcA5ZcB8VogXgXER4H4MBBfA+LnQHwBiJvz9BgSApUYihI1GLKj1Ri87KUYKtO0GBZ3WYHF9i5wZpADqiOEmYjAcAAAczkSrg==');
  EB_statueC        := DTMFromString('mrAAAAHic42BgYLgIxAeB+CwQ34DyQeyrQHweiBcC8TIgngrEs4F4JRBvBeItQHwCiG/u8GM4tMSN4eXJbIZN0x0YTq/xZNi/yJXh5CoPhhfHkxnkgGrwYSYCGAYAq6YbNw==');
  EB_net.DTM        := DTMFromString('m1gAAAHic42JgYHBmYmBwAmI7IPYEYjMgtgZiNyD2AuIAIPYB4idAtTcZIPQDKP0KiN9B6UdA/BGIbU11gSQjQSxHlCriMQIAAMoaDJs=');
  EB_rawFish.DTM    := DTMFromString('mlwAAAHicY2dgYHBgYmCwAmI7KDYBYhcg9gPiIEYGhgAgjgBiLyAOh2IfILbpPMsgXn6WIXbxK6ApjChYDkjCMCsaZkLCjGgYCgCf0wlq');
  EB_cookedFish.DTM := DTMFromString('mrAAAAHic42BgYMhkYmBIAOICIM4A4gogLmKCiMcB8TOgmldA/ASI7wHxAyB+DsTvoLg5zobhxdOnDAWBJkAeIwaWA5IwjCnLwMCEhLHJwwAAcrUP0w==');
  addOnTerminate('EB_freeARDTMS');
end;

(**
 * Author: Justin
 * Description: Returns true if player is in the random.
 *)
function EB_detect(): boolean;
begin
  if (not (tabExists(TAB_MAGIC))) then
    if (inRange(countMMDots('npc'), 1, 2)) then
      result := (not (tabExists(TAB_MAGIC)) and (GetMusic = 'Evil Bob''sIsland'));
end;

Function EB_interactServant(): Boolean;
var
  T        : Timer;
  Pnt      : TPoint;
  i,F,MS   : Integer;
  TPA      : TPointArray;
  rStrings : TStringArray;
  ATPA     : T2DPointArray;
  cs       : cs_TColorSettings;
label
  Start;
begin
  Result := False;
  if not isLoggedIn() then
    Exit;

  MS  := mouseSpeed;

  cs := cs_ToColorSettings(2, 0.02, 0.64);
  for i:=0 to 3 do
  begin
    cs_findColorsTolerance(TPA, 5273767, 13, AREA_MS, cs);
    if (Length(TPA) > 0) then
      break;
  end;

  if (length(TPA) < 1) then
    Exit(False);
  ATPA := clusterTPAEx(TPA, 10, 20);
  sortATPASize(ATPA, True);
  mouseSpeed := 25;

  for i:=0 to High(ATPA) do
  begin
    case random(10) of
      0..6:  missMouse(ATPA[i].midPnt(), 0, 0);
      7..10: humanMMouse(ATPA[i].midPnt(), 0, 0);
    end;

    if waitUpTextMulti(['o S','Serv','vant'], 300) then
      break;
  end;

  mouseSpeed := MS;

  if not isUpTextMulti(['o S','Serv','vant']) then
    Exit(False);

  warn('Found servant', WT_RANDOM);
  fastClick(MOUSE_RIGHT);
  Pnt := getMousePnt();
  brakeMMouse(Point(Pnt.X,Pnt.Y+13), 0, 6, True);

  if not waitOptionMulti(['Talk','k-t','to S'], 200) then
  begin
    inc(F);
    if (F > 3) then
      Exit;
    GoTo Start;
  end;

  FFlag(5);

  T.Start();
  repeat
    while isPlayerWalking() do
      Wait(1);
    if areTalking() then
      break;
  until(T.TimeElapsed > 4000)

  if findBlackChatMessage('reach') then
    GoTo Start;

  result := areTalking();
  if result then
     warn('Talking to servant', WT_RANDOM);
end;

Function EB_determineSpot(): String;
var
  T   : Timer;
  S   : String;
  x,y : Integer;
begin
  if not areTalking() then
    Exit;

  doConversation(['Look','contains','he likes','ere!']);

  T.Start();
  while (T.TimeElapsed < 7000) do
  begin
    if findColor(x, y, 39423, 495, 23, 505, 31) then
      break;
    clickContinue(True);
  end;

  if not findColor(x, y, 39423, 495, 23, 505, 31) then // orange 'X' upper-right corner
    Exit;

  T.Start();
  while ((T.TimeElapsed < 8000) and findColor(x, y, 39423, 495, 23, 505, 31)) do
  begin
    if findDTM(EB_statueA, x, y, MSX1, MSY1, MSX2, MSY2) then
    begin
      S := 'North';
      break;
    end;
    if findDTM(EB_statueB, x, y, MSX1, MSY1, MSX2, MSY2) then
    begin
      S := 'South';
      break;
    end;
    if findDTM(EB_statueC, x, y, MSX1, MSY1, MSX2, MSY2) then
    begin
      S := 'East';
      break;
    end;
  end;

  if (S = '') then
    S := 'West';

  Result   := S;
  EB_Stage := 1;
end;

Function EB_hasItem(Which: String): Boolean;
var
  Pnt : TPoint;
begin
  if not isLoggedIn() then
    Exit(False);
  gameTab(TAB_INV);
  case Which of
    'Net'        : Result := EB_net.findIn(AREA_INV, Pnt);
    'Raw fish'   : Result := EB_rawFish.findIn(AREA_INV, Pnt);
    'Cooked fish': Result := EB_cookedFish.findIn(AREA_INV, Pnt);
  end;
end;

Procedure EB_walkTo(Where: String);
var
  Pnt : TPoint;
  TPA : TPointArray;
begin
  if not isLoggedIn() then
    Exit;

  case Where of
    'Center':
      begin
        TPA := getMiniMapDots('npc');
        if High(TPA) = - 1 then
        begin
          warn('ailed to walk to center', WT_RANDOM);
          Exit;
        end;
        if not pointInBox(TPA[0], intToBox(MMCX - 10, MMCY - 10, MMCX + 10, MMCY + 10)) then
        begin
          missMouse(point(TPA[0].X-4, TPA[0].Y), 4, 0);
          fastClick(MOUSE_LEFT);
          waitFunc(@isPlayerWalking, 10, 2000);
        end;
        while isPlayerWalking() do
          wait(1);
        wait(randomRange(600,1200));
        Exit;
      end;
    'North': sortTPAFrom(TPA, Point(MSCX, MSY1));
    'South': sortTPAFrom(TPA, Point(MSCX, MSY2));
    'East' : sortTPAFrom(TPA, Point(MSX2, MSCY));
    'West' : sortTPAFrom(TPA, Point(MSX1, MSCY));
  end;

  case Where of
    'North': Pnt := Point(MMCX, 28);
    'South': Pnt := Point(MMCX, 135);
    'East' : Pnt := Point(708, MMCY);
    'West' : Pnt := Point(581, MMCY);
  end;

  missMouse(Pnt, 3, 3);
  fastClick(MOUSE_LEFT);

  if waitFunc(@flagPresent, 10, 500) then
    FFlag(0);
  While isPlayerWalking() do
    Wait(1);
  wait(randomRange(600,1200));
end;

Function EB_walkToClosestItem(): Boolean;
var
  TPA : TPointArray;
begin
  Result := False;
  if not isLoggedIn() then
    Exit(False);

  warn('Walking to nearest item...', WT_RANDOM);
  if not cs_findColorsTolerance(TPA, 789758, 0, AREA_MM, cs_CTS) then
    Exit;

  RAaSTPA(TPA, 4);
  sortTPAFrom(TPA, Point(MMCX, MMCY));
  missMouse(TPA[0], 5, 5);
  fastClick(mouse_left);
  FFlag(0);
  While isPlayerWalking() do
    Wait(10);
  wait(randomRange(600,1200));

  TPA := [];
  if not cs_findColorsTolerance(TPA, 789758, 0, AREA_MS, cs_CTS) then
    Exit;

  RAaSTPA(TPA, 4);
  sortTPAFrom(TPA, Point(MMCX, MMCY));
  Result := (distance(MMCX,MMCY,TPA[0].X,TPA[0].Y) < 10);
end;

Function EB_takeNet: Boolean;
var
  Pnt  : TPoint;
  i,F  : Integer;
  TPA  : TPointArray;
  ATPA : T2DPointArray;
  cs   : cs_TColorSettings;
label
  Start;
begin
  EB_walkToClosestItem();
  cs := cs_ToColorSettings(2, 0.24, 1.29);

  Start:
  for i:=0 to 3 do
  begin
    cs_findColorsTolerance(TPA, 2305593, 7, AREA_MS, cs);
    if (Length(TPA) > 0) then
      break;
  end;

  if (length(TPA) < 1) then
  begin
    inc(F);
    if F>3 then
      Exit(False);
    warn('Failed to find net, walking to nearest item', WT_RANDOM);
    EB_walkToClosestItem();
    GoTo Start;
  end;

  ATPA := clusterTPA(TPA, 15);
  sortATPAFromMidPoint(ATPA, Point(MSCX, MSCY));

  for i:=0 to high(ATPA) do
  begin
    if EB_hasItem('Net') then
    begin
      warn('Acquired a fishing net', WT_RANDOM);
      Exit(True);
    end;

    missMouse(ATPA[i].midPnt(), 3, 3);
    if not waitUpTextMulti(['ishing','net','Take Sma','ke Sma'], 300) then
      continue;
    fastClick(MOUSE_RIGHT);
    waitOptionMulti(['Take Sma','ke Sma'], 300);

    FFlag(0);
    while isPlayerWalking() do
      Wait(1);
  end;
end;

function EB_findFishingSpots(var Pnts: TPointArray): Boolean;
var
  b    : TBox;
  i    : Integer;
  tpa  : TPointArray;
  atpa : T2DPointArray;
  cs   : cs_TColorSettings;
begin
  Result := False;
  if not isLoggedIn() then
    Exit(false);

  cs := cs_ToColorSettings(2, 0.22, 1.63);
  for i:=1 to 3 do
  begin
    cs_findColorsTolerance(tpa, 14270630, 17, intToBox(MSX1,22,MSX2,MSY2), cs);
    if (length(tpa) > 0) then
      break;
  end;

  if (length(tpa) > 0) then
  begin
    atpa := clusterTPA(tpa, 10);
    sortATPAFromMidPoint(atpa, Point(MSCX,MSCY));

    cs := cs_ToColorSettings(2, 0.09, 0.51);
    for i:=0 to High(atpa) do
    begin
      if (length(atpa[i]) < 75) then
      begin
        b := atpa[i].getBounds();
        b.scale(30, 30);
        if not cs_findColorsTolerance(tpa, 3822643, 13, b, cs) then
        begin
          setArrayLength(Pnts, Length(Pnts)+1);
          Pnts[High(Pnts)] := atpa[i].midPnt();
        end;
      end;
    end;
    result := length(Pnts) > 0;
    if result then
      sortTPAFrom(Pnts, Point(MSCX,MSCY));
  end;
end;

Procedure EB_catchAFish();
var
  T     : Timer;
  i,F   : Integer;
  Spots : TPointArray;
label
  Start;
begin
  Start:
  if not isLoggedIn() then
    Exit;
  if not EB_findFishingSpots(Spots) then
    Exit;

  for i:=0 to high(Spots) do
  begin
    if i>2 then
      Exit;

    case random(10) of
      0..6:  missMouse(Spots[i], 5, 5);
      7..10: brakeMMouse(Spots[i], 5, 5, False);
    end;

    if waitUpTextMulti(['Net','t Fi','Fishing','spot'], 300) then
      break;
  end;

  if not isUpTextMulti(['Net','t Fi','Fishing','spot']) then
    Exit;

  fastClick(MOUSE_LEFT);

  if not didRedClick() then
  begin
    inc(F);
    if (F > 3) then
      Exit;
    GoTo Start;
  end;

  FFlag(5);

  T.Start();
  repeat
    while isPlayerWalking() do
      Wait(1);
    if EB_hasItem('Cooked fish') then
      break;
  until(T.TimeElapsed > 7000);
end;

Procedure EB_uncookFish();
var
  T    : Timer;
  Pnt  : TPoint;
  i    : Integer;
  TPA  : TPointArray;
  ATPA : T2DPointArray;
  cs   : cs_TColorSettings;
begin
  if not isLoggedIn() then
    Exit;
  gameTab(TAB_INV);

  if not EB_cookedFish.findIn(AREA_INV, Pnt) then
    Exit;

  brakeMMouse(Pnt, 7, 7, False);
  fastClick(MOUSE_RIGHT);
  waitOption('Use', 300);

  cs := cs_ToColorSettings(2, 2.78, 0.08);
  if cs_findColorsTolerance(TPA, 6054748, 12, AREA_MS, cs) then
  begin
    ATPA := clusterTPA(TPA, 10);
    SortATPASize(ATPA, True);
    for i:=0 to high(ATPA) do
    begin
      missMouse(ATPA[i].midPnt, 5, 5);
      fastClick(MOUSE_RIGHT);
      if waitOptionMulti(['> Unc','g -> U','g pot'], 300) then
      begin
        FFlag(0);
        wait(600 + Random(400));
        T.Start();
        while T.TimeElapsed < 6000 do
          if EB_hasItem('Raw fish') then
          begin
            warn('Acquired a raw fish', WT_RANDOM);
            Exit;
          end;
        break;
      end;
    end;
  end;
end;

Procedure EB_feedCat();
var
  T    : Timer;
  Pnt  : TPoint;
  i    : Integer;
  TPA  : TPointArray;
  ATPA : T2DPointArray;
  cs   : cs_TColorSettings;
begin
  if not isLoggedIn() then
    Exit;
  gameTab(TAB_INV);
  if not EB_rawFish.findIn(AREA_INV, Pnt) then
    Exit;

  brakeMMouse(Pnt, 7, 7, False);
  fastClick(MOUSE_RIGHT);
  waitOption('Use', 200);

  cs := cs_ToColorSettings(2, 0.00, 1.20);
  if cs_findColorsTolerance(TPA, 1710625, 8, AREA_MS, cs) then
  begin
    ATPA := clusterTPA(TPA, 5);
    sortATPASize(ATPA, True);

    for i:=0 to high(ATPA) do
    begin
      missMouse(ATPA[i].midPnt, 5, 5);
      Wait(100 + Random(100));
      fastClick(MOUSE_RIGHT);
      if waitOptionMulti(['> Ev','g -> Ev'], 300) then
      begin
        FFlag(0);
        wait(600 + Random(400));
        waitFunc(@areTalking, 10, 4000);
        break;
      end;
    end;
  end;

  if doConversation(['nap']) then
    warn('Fed Bob', WT_RANDOM);
  clickContinue(True);
end;

//Colors by Justin
function EB_leaveIsland(): Boolean;
var
  T     : Timer;
  P     : TPoint;
  i,x,y : Integer;
  arP   : TPointArray;
  ararP : T2DPointArray;
  cs    : cs_TColorSettings;
begin
  Result := False;
  if not isLoggedIn() then
    Exit;

  if tabExists(TAB_MAGIC) then
    Exit(True);

  cs := cs_ToColorSettings(2, 0.03, 0.47);
  if cs_findColorsTolerance(arP, 6797494, 15, AREA_MS, cs) then
  begin
    ararP := clusterTPA(arP, 5);
    for i:=0 to High(ararP) do
    begin
      missMouse(ararP[i].midPnt, 2, 2);
      Wait(100 + Random(100));
      fastClick(MOUSE_RIGHT);
      if waitOptionMulti(['Enter','nter','ortal'], 300) then
      begin
        FFlag(0);
        wait(600 + Random(400));
        waitFunc(@areTalking, 10, 4000);
        break;
      end;
    end;
  end else
  begin
    warn('Unable to find portal', WT_RANDOM);
    Exit;
  end;

  if (not (tabExists(TAB_MAGIC))) then
    if (inRange(countMMDots('npc'), 1, 2)) then
      result := (not (tabExists(TAB_MAGIC)) and (GetMusic = 'Evil Bob''sIsland'));

  T.Start();
  while T.TimeElapsed < 25000 do
  begin
    clickContinue(true);
    if not (inRange(countMMDots('npc'), 1, 2)) then
      if not (getMusic = 'Evil Bob''sIsland') then
        break;
  end;

  result := tabExists(TAB_MAGIC);
end;

Function EB_solve(): Boolean;
var
  T : Timer;
begin
  Result := False;
  if not isLoggedIn() then
    Exit;

  EB_setup();
  T.start();

  while ((not tabExists(TAB_MAGIC) and (T.timeElapsed() < 60000))) do
  begin
    if EB_Stage < 1 then
    begin
      if not EB_interactServant() then
        EB_walkTo('Center');

      EB_targetLoc := EB_determineSpot();
      warn(''+EB_targetLoc+' location detected', WT_RANDOM);
      T.start();
    end;

    if ((not EB_hasItem('Cooked fish')) and (not EB_hasItem('Raw fish'))) then
    begin
      if not EB_hasItem('Net') then
        EB_takeNet();
      if EB_hasItem('Net') then
      begin
        warn('Walking to fishing spot...', WT_RANDOM);
        EB_walkTo('Center');
        EB_walkTo(EB_targetLoc);
        EB_catchAFish();
        EB_Stage := 2;
        T.start();
      end;
    end;

    if (EB_hasItem('Cooked fish') and (EB_Stage = 2)) then
    begin
      warn('Uncooking the fish...', WT_RANDOM);
      EB_walkTo('Center');
      EB_uncookFish();
      EB_Stage := 3;
      T.start();
    end;

    if (EB_hasItem('Raw fish') and (EB_Stage = 3)) then
    begin
      warn('Feeding Bob...', WT_RANDOM);
      EB_feedCat();
      EB_Stage := 4;
      T.start();
    end;

    if (EB_Stage = 4) then
    begin
      warn('Leaving island...', WT_RANDOM);
      Result := EB_leaveIsland();
      T.start();
      if Result then
        doConversation([]);
    end;
  end;
end;
