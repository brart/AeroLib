const
  PB_SCORE_10 = 180; // the tpa length of when the score is 10

(**
 * Author: Coh3n
 * Description: Detects if a player is in the Pinball random.
 *)
function PB_Detect(): boolean;
begin
  // makes sure friends tab exists and magic doesn't
  if ((not tabExists(TAB_MAGIC)) and (tabExists(TAB_FRIENDS))) then
    result := (Trim(getTextAtExWrap(374, 238, 411, 253, 0, 5, 1,
        65535, 5, 'UpChars07')) = 'Score');
end;

(**
 * Author: Coh3n
 * Description: Returns the length of a tpa found of the yellow color of the
 * score at the top of the main screen.
 *)
function PB_GetScore(): integer;
var
  tpa: TPointArray;
begin
  // yellow color of the score
  if (cs_findColorsTolerance(tpa, 65535, 30, intToBox(373,239,434,258), cs_CTS)) then
    result := length(tpa);
end;

(**
 * Author: SKy Scripter, NCDS, & Coh3n
 * Description: Returns true if a flashing pillar is found.  Sets coordinates
 * to x, y.
 *)
const
  _PB_FILL_COLOR = 10;
  _PB_MIN_LENGTH = 20;

function PB_ScanPost(var pnt: tpoint): boolean;
var
  tpa: TPointArray;
  pillarCols: array of integer;
  ATPA, pillarGaps: T2DPointArray;
  oldTarget, bmp, i, j, c: integer;
  hue, sat, lum: extended;
  tmpBox: TBox;
begin
  result := false;
  bmp := -1;

  try
// the green of the spinning pillars
    cs_findColorsTolerance(tpa, 6011467, 38, AREA_MS, cs_CTS3);
    if (length(tpa) < _PB_MIN_LENGTH) then
      exit;

    bmp := createBitmap(MSX2 + 5, MSY2 + 5); // creats a bitmap of the MS
    fastDrawClear(bmp, _PB_FILL_COLOR);      // fill it with a distinct color

    c := 0;
    pillarCols := getColors(tpa);

// draws a rectangle on the bitmap of the colors that are light enough
    for i := 0 to high(tpa) do
    begin
      colorToHSL(pillarCols[i], hue, sat, lum);

      if (lum > 50.0) then
      begin
        tmpBox := intToBox(max(0, tpa[i].x - 1), max(0, tpa[i].y - 1), tpa[i].x + 1, tpa[i].y + 1);
        rectangleBitmap(bmp, tmpBox, clRed);
        inc(c);
      end;
    end;

    if (c > _PB_MIN_LENGTH) then
    begin
      floodFillBitmap(bmp, point(5, 5), _PB_FILL_COLOR, clBlack);

      oldTarget := getImageTarget();
      setTargetBitmap(bmp);

      findColors(tpa, _PB_FILL_COLOR, 0, 0, MSX2 - 5, MSY2 - 5);

      setImageTarget(oldTarget); // reset target to RS client

      if (length(tpa) > 10) then
      begin
        //ATPA := TPAtoATPA(tpa, 60);
        ATPA := clusterTPA(tpa, 60);
        sortATPASize(ATPA, true);

        for i := 0 to high(ATPA) do
        begin
          pillarGaps := findGapsTPA(ATPA[i], 10);

          for j := 0 to high(pillarGaps) do
            if (length(pillarGaps[j]) > 2) then
            begin
              pnt := ATPA[i].midPnt();
              result := true;
              break;
            end;

          if (result) then
            break;
        end;
      end;
    end;
  finally
    if (bmp <> -1) then
      freeBitmap(bmp);
  end;

  if (result) then
    warn('Found post', WT_RANDOM);
end;

(**
 * Author: Coh3n
 * Description: Returns true if player clicks a post and the score changes.
 *)
function PB_TagPost(): boolean;
var
  T        : Timer;
  pnt      : TPoint;
  oldScore,
  s        : integer;
begin
  if not isLoggedIn() then
    exit(false);

  oldScore := PB_GetScore();
  s := mouseSpeed;
  mouseSpeed := 20;
  if (PB_ScanPost(pnt)) then
  begin
    missMouse(pnt, 5, 5);
    fastClick(MOUSE_RIGHT);

    if waitOptionMulti(['ag','g P'], 400) then
    begin
      T.start();
      while (T.timeElapsed < 6000) do
      begin
        if (PB_GetScore() <> oldScore) then
        begin
          warn('Successfully tagged post', WT_RANDOM);
          result := true;
          break;
        end;

        wait(300 + random(200));
      end;
    end else
      humanMMouse(point(pnt.x,pnt.y-25), 8, 8);
  end;
end;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Uses mainscreen walking to exit the random.
 * Updated: 23/03/2013 by DannyRS
 *)
function PB_Exit(): boolean;
var
  T : Timer;
  pnt : TPoint;
  i: integer;
  tpa, tpa_Exit: TPointArray;
  ATPA: T2DPointArray;
  Deg: Extended;
begin

  if not isLoggedIn() then
    exit(false);

  warn('Exiting cave', WT_RANDOM);
  setAngle(ANGLE_HIGH);
  Deg := getCompassAngle();
  setCompass('N');

  T.start();
  repeat
    // the green path color
    if cs_findColorsTolerance(tpa, 4544055, 35, intToBox(MSX1,MMCY+10,MSX2,MSY2), cs_CTS) then
    begin
      if (length(tpa) > 0) then
      begin
        pnt := tpa.midPnt();
        humanMMouse(pnt, 5, 5);
        if waitUptextMulti(['Exit','xit','Cave','ave'], 300) then
        begin
          fastClick(MOUSE_LEFT);
          if (waitTabExists(TAB_MAGIC, 8000)) then
          begin
            result := true;
            break;
          end;
        end;
      end;
    end;

    if cs_findColorsTolerance(tpa, 5734757, 35, AREA_MS, cs_CTS) then
      if (length(tpa) > 0) then
      begin
        sortTPAFrom(tpa, point(MSCX,MSY2));
        pnt := point(tpa[0].x, tpa[0].y - 20);
        humanMMouse(pnt, 5, 5);

        if waitUptextMulti(['Walk','alk','here','ere'], 200) then
           fastClick(MOUSE_LEFT)
        else if waitUptextMulti(['Exit','xit','Cave','ave'], 200) then
        begin
          fastClick(MOUSE_LEFT);
          if waitTabExists(TAB_MAGIC, 8000) then
          begin
            result := true;
            break;
          end;
        end;
      end;
    result := tabExists(TAB_MAGIC);
    wait(2000 + random(300));
  until ((T.timeElapsed > 25000) or (result));

  if (result) then
  begin
    Wait(100 + random(500));
    setCompass(Deg);
    warn('Clicked exit cave', WT_RANDOM)
  end else
  begin
    warn('Took to long to find exit... Looking for backup', WT_RANDOM);

    setCompass('S');
    T.start();
    repeat
      if cs_findColorsTolerance(tpa_Exit, 4677175, 23, AREA_MS, cs_CTS) then
        ATPA := clusterTPAEx(tpa_Exit, 70, 5);

       if (length(ATPA) > 0) then
       begin
        sortATPASize(ATPA, True);

        for i:=0 to high(ATPA) do
        begin
          pnt := ATPA[i].midPnt();
          humanMMouse(pnt, 5, 5);
          if waitUptextMulti(['Exit','xit','Cave','ave'], 200) then
          begin
            fastClick(MOUSE_LEFT);
            if (waitTabExists(TAB_MAGIC, 8000)) then
            begin
              result := true;
              break;
            end;
          end;
        end;
      end;

      result := tabExists(TAB_MAGIC);
      wait(2000 + random(300));
    until ((T.timeElapsed > 20000) or (result));

    if (result) then
      warn('Clicked exit cave with backup', WT_RANDOM)
    else
      warn('Failed to exit', WT_RANDOM);
  end;
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Solves the Pinball random.
 *)
function PB_Solve(): boolean;
var
  T : Timer;
begin
  if not isLoggedIn() then
    exit;

  T.start();
  doConversation([]);

  repeat
    if (PB_GetScore = PB_SCORE_10) then // length of "Score: 10"
    begin
      if PB_Exit() then
      begin
        result := true;
        break;
      end;
    end else
      PB_TagPost();

    wait(500 + random(200));
  until(result or (T.timeElapsed > (15 * 60000)));  // maximum 15 minutes
  if Result then
    warn('Successfully solved the PinBall random', WT_RANDOM);
end;
