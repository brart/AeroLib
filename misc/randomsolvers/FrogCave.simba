{
====
Frog
====
}

var
  FROG_ISLAND_DTM,DTM_ROYALFROG: Integer;

const
  FROG_YELLOW             = 7986172;
  FROG_RED                = 3097339;
  FROG_GREEN              = 879885;
  FROG_SWAMP              = 8031312;
  FROG_CROWN              = 1095911;
  FROG_CROWN_COLOR_BACKUP = 633312;

function FrogCave_FindFrog: boolean; forward;

(**
 * Author: Justin
 * Description: Detects if we are in the Frog Random. Small chance it would
 * fail to detect due to the frogs being off-screen, checks for Music Track too.
 *)
function FrogCave_Detect(): boolean;
begin
  if not (tabExists(TAB_MAGIC)) then
  begin
    if Length(getMinimapDots('npc')) >= 4 then
      if percentBlackMM() >= 35 then
        if (getMusic() = 'Frooland') then
          exit(true);
    if (cs_countColorTolerance(FROG_GREEN, 30, AREA_MS, cs_CTS) >= 100) then
      if (cs_countColorTolerance(FROG_RED, 30, AREA_MS, cs_CTS) >= 20) then
        Result := (cs_countColorTolerance(FROG_YELLOW, 30, AREA_MS, cs_CTS) >= 5);
  end;
end;

(**
 * Author: Xtrapsp
 * Description: Unloads the DTMs that were used within the random.
 *)
procedure FrogCave_Free_DTMS();
begin
  FreeDTM(FROG_ISLAND_DTM);
  FreeDTM(DTM_ROYALFROG);
end;

(**
 * Author: Justin
 * Description: Gets our player ready to solve the random.
 *)
procedure FrogCave_Setup();
begin
  if not isLoggedIn() then
    exit;
  setAngle(ANGLE_HIGH);
  setCompass('n');
  FROG_ISLAND_DTM := DTMFromString('mrAAAAHic42BgYDjJxsBwA4qvA/EpID4MxLuAeBMQtwDV9ABxNRAXA3EuEBcBcQkQ1wJxaJAdg3lxAk4sB1SDDzMSwDAAAMr5E3M=');
  //DTM_ROYALFROG := DTMFromString('mbQAAAHicY2VgYLgDxLeB+CYQ34OyeRgZGDgZIbQAEPMD8cpOYYbfZ1QZDs4RYziuKcbw+5wxgxxQLTpmxoLBAAB7VQzf');
  DTM_ROYALFROG := DTMFromString('mggAAAHicY2NgYFjPyMCwAYg3AfFqIF4DxU+Bco+A+AkDhP0ciF8B8eH5kgxfjssx/D6rwfDCUI7h1X45Bs4sPgY5oBw2zIQDQwAASOcTBQ==');
  addOnTerminate('FrogCave_Free_DTMS');
end;

(**
 * Author: Xtrapsp/Justin
 * Description: Walks our player to the center of the map where the
 * Frog Princess is located. If the DTM fails, will use TPA failsafe.
 *)
function FrogCave_WalkCenter: boolean;
var
  pnt : TPoint;
  TPA : TPointArray;
  TPAX, TPAY: Integer;
begin
  if not isLoggedIn() then
    exit;
  if DTM_findBestPointEx([FROG_ISLAND_DTM], AREA_MM, pnt) then
  begin
    humanMMouse(pnt, 5, 5);
    fastClick(MOUSE_LEFT);
    warn('FrogCave_WalkCenter: Moving to center of cave', WT_RANDOM);
    FFlag(0);
    result := true;
    warn('FrogCave_WalkCenter[Main]: result: ' + BoolToStr(result), WT_RANDOM);
  end
  else
  begin
    warn('FrogCave_WalkCenter: Unable to find main DTM, using backup', WT_RANDOM);
    if (cs_findColorsTolerance(TPA, FROG_SWAMP, 50, AREA_MM, cs_CTS)) then
    begin
      pnt := middleTPA(TPA);
      mouse(pnt, 8, 8, MOUSE_LEFT);
      wait(600 + Random(120));
      FFlag(0);
      result := true;
      warn('FrogCave_WalkCenter[Backup]: result: ' + BoolToStr(result), WT_RANDOM);
    end;
  end;
end;

(**
 * Author: Xtrapsp/Justin
 * Description: Finds the Frog Princess via DTM with a TPA failsafe.
 * If the DTM fails, it will rotate the camera just incase the Frog Princess
 * is off the screen.
 *)
function FrogCave_FindFrog(): boolean;
var
  T : Timer;
  Attempt, tmpCTS, i: integer;
  arP: TPointArray;
  ararP: T2DPointArray;
  P: TPoint;
  cs : cs_TColorSettings;
begin
  warn('FrogCave_FindFrog: Attempting to find the Frog Princess', WT_RANDOM);
  cs := cs_ToColorSettings(2, 0.02, 0.76);

  T.start();
  repeat
    if DTM_findBestPointEx([DTM_RoyalFrog], AREA_MS, P) then
    begin
      missMouse(P, 3, 3);
      if waitUpText('rog', 300) then
      begin
        fastClick(MOUSE_LEFT);
        warn('FrogCave_FindFrog: Found Frog Princess', WT_RANDOM);
        break;
      end;
    end else
      begin
        warn('FrogCave_FindFrog: Could not find Frog Princess. Falling onto backup', WT_RANDOM);
        if cs_findColorsTolerance(arP, FROG_CROWN, 12, AREA_MS, cs) then
        begin
          ararP := clusterTPA(arP, 8);
          sortATPAFromMidPoint(ararP, point(MSCX,MSCY));

          for i := 0 to High(ararP) do
          begin
            P := midPntInTPA(ararP[i]);
            missMouse(P, 5, 5);
            if waitUpTextMulti(['Frog','Talk','rog'], 300) then
            begin
              fastClick(MOUSE_RIGHT);
              Result := waitOptionMulti(['Talk-to','alk-t','Frog','rog'], 500);
              warn('FrogCave_FindFrog[Backup]: result: ' + BoolToStr(result), WT_RANDOM);
              wait(600 + Random(120));
              FFlag(0);
              break;
            end;
          end;
        end;
      end;

    Inc(Attempt);
    warn('FrogCave_FindFrog: Attempt: ' + inttostr(Attempt), WT_RANDOM);
  until ((Attempt > 3) or (T.timeElapsed() > 5000));

  FFlag(0);
  result := waitFunc(@areTalking, 10, 3000);
  if result then
    warn('FrogCave_FindFrog: Began talking', WT_RANDOM);
end;

(**
 * Author: Justin
 * Description: Handles solving the random event.
 *)
function FrogCave_Solve(): boolean;
var
  T : Timer;
  i : Integer;
  responses: TStringArray;
begin
  if not isLoggedIn() then
    exit;
  FrogCave_Setup();
  responses := ['ry sor','change','ge me','me bac','lease'];

  for i:=1 to 4 do
  begin
    if FrogCave_WalkCenter then
      if FrogCave_FindFrog then
        if doConversation(responses) then
          break
        else
          warn('FrogCave_Solve: Failed to apologize', WT_RANDOM);
  end;

  T.start();
  while ((not tabExists(TAB_MAGIC)) and (T.timeElapsed() < 8000)) do
    wait(10);

  result := tabExists(TAB_MAGIC);
  if not result then
    warn('FrogCave_Solve: Frog solver failed or timed out', WT_RANDOM)
  else
    warn('FrogCave_Solve: Successfully completed the Frog random event', WT_RANDOM)
end;
