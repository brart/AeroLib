(*
Sandwich Lady
=============

Stores all the routines to solve the Sandwich Lady random.  None of these
routines should be used throughout scripts.  They only need to be called in
SRL's random detection methods.

This solver uses text recognition to determine which food to click,
then uses TPA Scanning to find and click the required food.

*)

var
  _SL_TimeOut: integer;

function SL_StopSearch: boolean;
begin
  Result := False;

  if (CountColor(39423, 490, 10, 513, 32) < 5) then
    Result := True;

  if ((GetSystemTime - _SL_TimeOut) > 35000) then
    Result := True;
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Selects a sandwich number 0-6 (left-right)
 *)
function SL_Select(SandwichNumber: integer): boolean;
var
  SPoint: tpoint;
begin
  Result := False;
  SPoint := Point(-1,-1);

  case SandwichNumber of
    0: SPoint := Point(155, 120);
    1: SPoint := Point(260, 122);
    2: SPoint := Point(365, 132);
    3: SPoint := Point(110, 210);
    4: SPoint := Point(205, 219);
    5: SPoint := Point(315, 213);
    6: SPoint := Point(395, 217);
  end;

  if (SPoint.X < 0) then
  begin
    warn('[ERROR] Invalid sandwich number', WT_RANDOM);
    Exit;
  end;

  if (SL_StopSearch) then Exit;
  mouse(SPoint, 4, 4, MOUSE_LEFT);
  Result := True;
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Gets sandwich name from screen
 *)
function SL_GetSandwichName: string;
var
  FoundString, SWName: string;
begin
  Result := '';
  SWName := '';

  FoundString := Trim(getTextAtExWrap(80, 270, 400, 303,
      0, 3, 1, 2070783, 0, 'UpChars07'));

  SWName := Trim(Between('Have a', 'for free', FoundString));

  if (not (SWName='')) then
    Result := SWName;
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Returns TBox area of all the sandwiches
 *)
function SL_SandwichSearchBox(BoxNumber: integer): tbox;
begin
  case BoxNumber of
    0: Result := IntToBox(100,80,205,155);
    1: Result := IntToBox(215,80,305,160);
    2: Result := IntToBox(320,80,410,163);
    3: Result := IntToBox(71,170,160,255);
    4: Result := IntToBox(165,175,255,260);
    5: Result := IntToBox(260,175,355,265);
    6: Result := IntToBox(360,175,435,270);
  end;
end;

(**
 * Author: DannyRS
 * Last modified 03/02/2014 by Flight
 * Description: Finds the correct box number to click
 *)
function SL_FindSandwichBoxNumber: integer;
var
  i, SColor, STol, MinSSize: integer;
  SHM, SSM: extended;
  SName: string;
  SB: tbox;
  SWTPA: tpointarray;
  cs : cs_TColorSettings;
begin
  Result := -1;

  SName := SL_GetSandwichName();

  if (SName='') then
  begin
    warn('[ERROR] Unable to get sandwich name', WT_RANDOM);
    Exit;
  end;

  warn('Sandwich Name: ' + SName, WT_RANDOM);

  case Lowercase(SName) of
    'baguette'          :
      begin
        SColor   := 2910074;
        STol     := 10;
        cs       := cs_ToColorSettings(2, 0.03, 0.08);
        MinSSize := 35;
      end;
    'chocolate bar'     :
      begin
        SColor   := 2375783;
        STol     := 7;
        cs       := cs_ToColorSettings(2, 0.03, 0.24);
        MinSSize := 120;
      end;
    'kebab'             :
      begin
        SColor   := 1276942;
        STol     := 3;
        cs       := cs_ToColorSettings(2, 0.08, 0.59);
        MinSSize := 25;
      end;
    'pie'               :
      begin
        SColor   := 5395289;
        STol     := 24;
        cs       := cs_ToColorSettings(2, 0.10, 0.08);
        MinSSize := 150;
      end;
    'bread roll'        :
      begin
        SColor   := 1280167;
        STol     := 9;
        cs       := cs_ToColorSettings(2, 0.01, 0.24);
        MinSSize := 110;
      end;
    'triangle sandwich' :
      begin
        SColor   := 2276602;
        STol     := 2;
        cs       := cs_ToColorSettings(2, 0.05, 0.81);
        MinSSize := 25;
      end;
    'square sandwich'   :
      begin
        SColor   := 5143435;
        STol     := 6;
        cs       := cs_ToColorSettings(2, 0.01, 0.05);
        MinSSize := 110;
      end;
    else
    begin
      warn('[ERROR] Invalid sandwich name found', WT_RANDOM);
      Exit;
    end;
  end;

  warn('Scanning for sandwich', WT_RANDOM);
  repeat
    for i:=0 to 6 do
    begin
      SB := SL_SandwichSearchBox(i);
      cs_findColorsTolerance(SWTPA, SColor, STol, SB, cs);
      if (Length(SWTPA) < MinSSize) then Continue;
      Result := i;
      Break;
    end;
  until (Result > -1) or (SL_StopSearch);
end;

(**
 * Author: DannyRS
 * Last modified 15/03/2013 By DannyRS
 * Description: Solves the Sandwich Lady random event
 *)
function SL_Solve(): boolean;
begin
  Result := False;

  _SL_TimeOut := getSystemTime();
  wait(RandomRange(600, 800));
  clickContinue(True);

  Wait(RandomRange(1300,1800));

  if (SL_StopSearch) then
  begin
    warn('[ERROR] SandwichLady select screen not up', WT_RANDOM);
    Exit;
  end;

  repeat
    if SL_Select(SL_FindSandwichBoxNumber) then
    begin
      warn('Selected sandwich', WT_RANDOM);
      Result := True;
    end;
  until (Result) or (SL_StopSearch);

  if ((getSystemTime() - _SL_TimeOut) > 35000) then
    warn('SandwichLady solver timed out', WT_RANDOM);

  Wait(RandomRange(1600, 1900));

  clickContinue(True);
end;
