{
==========
DrillDemon
==========
}

function DD_Detect(): Boolean;
begin
  if (not tabExists(TAB_OPTIONS)) and (not tabExists(TAB_EMOTES)) then
    Result := (getMusic() = 'CorPoral Punisbment');
end;

(**
 * Author: DannyRS
 * Last Modified: 06/02/2014 by Flight
 * Description: Moves the player back to the center of the random
 * Note: Inspired by Le Jingle
 *)
function DD_ResetPosition(): Boolean;
var
  tb       : TBox;
  p        : TPoint;
  WallTPA  : TPointArray;
  WallATPA : T2DPointArray;
begin
  Result := False;

  if not isLoggedIn() then Exit;

  cs_findColorsTolerance(WallTPA, 15593957, 70, intToBox(600,58,690,110), cs_CTS);
  WallATPA := clusterTPA(WallTPA, 5);
  sortATPASize(WallATPA, True);

  if (Length(WallATPA) < 1) then Exit;

  tb := WallATPA[0].getBounds();
  p  := tb.midPoint();

  mouse(point(p.x,RandomRange(p.y,p.y+2)), 0, 0, MOUSE_LEFT);
  Wait(RandomRange(300, 400));
  FFlag(0);
  Wait(RandomRange(800, 1200));

  Result := True;
end;

(**
 * Author: DannyRS
 * Last Modified: 06/02/2014 by Flight
 * Description: Talks to Sergeant Damien
 *)
function DD_TalkDemon(): Boolean;
var
  Pnt       : TPoint;
  x,y,i,
  Attempts  : Integer;
  DemonTPA  : TPointArray;
  DemonATPA : T2DPointArray;
  cs        : cs_TColorSettings;
begin
  Result := False;

  if areTalking() then
    Exit(true);

  cs := cs_ToColorSettings(2, 0.15, 1.61);
  repeat
    cs_findColorsTolerance(DemonTPA, 994406, 16, AREA_MS, cs);
    DemonATPA := clusterTPAEx(DemonTPA, 50, 100);
    sortATPASize(DemonATPA, True);

    if (length(DemonATPA) < 1) then
    begin
      inc(Attempts);
      Wait(RandomRange(200, 400));
      Continue;
    end;

    for i:=0 to high(DemonATPA) do
    begin
      if (Length(DemonATPA[i]) < 50) then Continue;
      pnt := DemonATPA[i].midPnt();
      mouse(pnt, 5, 5, MOUSE_RIGHT);
      if waitOptionMulti(['Talk','alk-to'], 300) then
      begin
        if (waitFunc(@areTalking, 50, 7000)) then
        begin
          warn('Talked to demon', WT_RANDOM);
          Exit(true);
        end else
          warn('Failed to Talked to demon', WT_RANDOM);
      end;
    end;
    inc(Attempts);
  until((Result) or (Attempts > 6));
end;

(**
 * Author: DannyRS
 * Last Modified: 06/02/2014 by Flight
 * Description: Gets the TBoxes of the green signs
 *)
function DD_GetSigns(): TBoxArray;
var
  i           : Integer;
  SignsSorted : Boolean;
  ESignsTPA   : TPointArray;
  ESignsATPA  : T2DPointArray;
begin
  cs_findColorsTolerance(ESignsTPA, 4553552, 30, AREA_MS, cs_CTS);
  ESignsATPA := clusterTPA(ESignsTPA, 60);

  repeat
    SignsSorted := True;
    for i:=0 to High(ESignsATPA) do
    begin
      if (length(ESignsATPA[i]) < 5) then
      begin
        deleteValueInATPA(ESignsATPA,i);
        SignsSorted := False;
        Break;
      end;
    end;
  until (SignsSorted);

  setLength(Result, Length(ESignsATPA));
  for i:=0 to high(ESignsATPA) do
    Result[i] := ESignsATPA[i].getBounds();

  warn('Number of signs located : ' + intToStr(length(ESignsATPA)), WT_RANDOM);
end;

(**
 * Author: DannyRS
 * Last Modified: 06/02/2014 by Flight
 * Description:
 *  Compares bitmaps to the signs and tries to
 *  return it's position, roughly centered
 *)
function DD_FindSign(WhichSign: String): TPoint;
var
  SB: TBoxArray;
  x, y, i, ib, hb: Integer;
  Saccuracy: Extended;
  SBMP: TIntegerArray;
begin
  Result := Point(-1, -1);

  SB := DD_GetSigns();
  if (Length(SB) < 1) then Exit;

  setLength(SBMP, 5);

  hb := High(SBMP);

  case LowerCase(WhichSign) of
    'jog':
      begin
        SBMP[0] := BitmapFromString(14, 15, 'meJxzrw1KnFAOQe5IbAgXDRGvEo' +
          '6y5zQDEVw7Vlk4wm8UmktooRJNMS4PojkVlxq4p5BDDKsaTBuRVWI' +
          'qw2UvVmUE44VaiolMEkAEAE9f+0k=');
        SBMP[1] := BitmapFromString(26, 17, 'meJxzqwl0w0AJfWUQhMYmD2E1jR' +
          'IDIShrdhMQwa2grmlkGwgxB4IodxVaMFLXNGQDKYwRNM+SHcvIQQf' +
          'XS57b0CICOQVSYhSmH8k2jSrxOJhNc0PNVhQiKhYdbuQmKgBkSPbW');
        SBMP[2] := BitmapFromString(29, 10, 'meJxzrQ5wJRrF9ZUSr3gwGItsMh' +
          'qXbJQ5qxGI4EZRxViImRBjIaZRbizcTGR3UmgsmpnUCltcxlIrVKl' +
          'rLNxk4tUDAIc3Qs8=');
        SBMP[3] := BitmapFromString(14, 17, 'meJxL6C9PACP3msAEJDYmSiBaJR' +
          'xlzWkCIoh6girharAqhhgFQQRNQ3MzdVUi+wuPXqyuhYcbXBDNX/D' +
          'gxeN9zOjAqpKg77CqxONfYlRiBg7+ACcm2ImMGgCPpxvW');
        SBMP[4] := BitmapFromString(15, 18, 'meJxzrwl0rwlM6C+HIHdsXDSELA' +
          'tnE1ScNacJiPArhiOIYiCCG4JHDdxk/GaiOYl2itHU4zEBzdm4VGI' +
          'GHVaVmIGGK3bQVOJ3AFaV+COOFoqJTDkkRRnxMQtEANqdPtI=');
      end;
    'starjumps':
      begin
        SBMP[0] := BitmapFromString(16, 16, 'meJxzrw1yx0CJE8ohCFMKK4Krx9' +
          'SSu7AdiEg1H6su/GogXPwIlyHEqMSlnhhH0kg9hS6nonqsyrBqgcQ' +
          '7LjOJUY/VXswEhifGkZMfAK38Sfc=');
        SBMP[1] := BitmapFromString(33, 17, 'meJxzqwl0Ixol9JUBEfHqSUUQ8+' +
          'lmC4Xm5CxohSNaqMeqkSCilo+objhBu6ge0cPAClrHAi4rqGgLHZI' +
          'TprHUtQWXsym3Al4Q4XIwsjh5pRa8uMPjWmTzyS4Y4bbgCUZiSngA' +
          'a5KX0w==');
        SBMP[2] := BitmapFromString(37, 16, 'meJxzrQ5wJR3F9ZXCERnacaHs+S' +
          '34raOiXXAbIYjqJhNjKfGIPjbSx5t0C1U6RyI97Ro21tEtNdLHOuR' +
          'iCtN8qtuIXDBiNZlGHgQiXMbSIgbh1uGJUyKrJAA7N7QN');
        SBMP[3] := BitmapFromString(22, 16, 'meJxzrwl0x4YS+suBCKsUkQhiAj' +
          'GG5CxsgyCyTUA2BNMcklQiy+JBxFtBql785pAaCwNuAoUhgCcw6WY' +
          'Cpi4iDYGnXqzqiTcBiHAphovjzylwQ3B5EG4RmiEAhx+zZw==');
        SBMP[4] := BitmapFromString(24, 17, 'meJxzrwl0JwIl9JcDETEqCRpCuV' +
          'EkGZKzsA2CiDQcrh5TFy5xTF0ELcWlnngTiDeKpLCl3ARc5pAX1zR' +
          'yDBnmUCV4qWUOpkYijULOOATTOUFzIIiYTIE/wyKbg8e/eAoQADSU' +
          '910=');
      end;
    'situps':
      begin
        SBMP[0] := BitmapFromString(32, 12, 'meJxzrwl0R0U5C9uAyB1DnCoIYj' +
          'gdzCfPCoK6KDGfoC5kw0m1ghgtmOYTaQWRWpAVEG8+msm4tGAqI9I' +
          'KrBoJBiDWsCKIsJqf0F8GRJiuJcN8ZKOQDYeLE4xugobDzYewSUoY' +
          'xBiObD7QBABMTOo0');
        SBMP[1] := BitmapFromString(36, 14, 'meJxzqwl0GwQoZ0ErENHNIgrtIl' +
          'I73C7yrCNeL7JFZNhFkl40u0iyjiSNmBYRbxepepHVUBIaboRSMpr' +
          'J+O3C6gus2km1i3gE0ZvQV0aMO4lxOR4EtAWCkEXgZqJJUWIX3CKs' +
          'BqLJEh8pBO1C9g6dEQA0UXaL');
        SBMP[2] := BitmapFromString(37, 16, 'meJxzrQ5wHRwoe34LENHTLgqtI1' +
          '473DqybSReL7Jd5FlHkl4060i1kSSNmHaRZB2pepGVkWojmnqCGtE' +
          'MpyRYiLcOf8ASg4hJMJiyZFsX11cKRMhcuJkQKbgswWRDpF3I1mHa' +
          'BZElJpUSaRcEkZSDyLCRVPOHEwIAf3vRcQ==');
        SBMP[3] := BitmapFromString(33, 12, 'meJxzrwl0x0A5C9uACFOcWghiPn' +
          '2soJEtyOaTbQV+jWhWkGELfl2Y5pNqBUFdyArIsIWgFjQFpFpBjPf' +
          'RpEgKLqzOQ1aQ0F8ORJimYY0aggjTCoj5cCsIxj5B8zEDBG4FxBYK' +
          'rUBzMIQNAF4A83M=');
        SBMP[4] := BitmapFromString(33, 13, 'meJxzrwl0x0A5C9uACFOcWghiPn' +
          '2soJEtyOaTZwVBXWhWkGoLQS2Y5pNkCzFakBWQagUxrkJTQJJHiPQ' +
          '7mhSuQCOIsMZIQn85EGHaTp75mK6FmA+3hZjYx4OQjSImEsk2H24F' +
          'kEFFW5DNh9sCsQIAUoImOg==');
      end;
    'pushups':
      begin
        SBMP[0] := BitmapFromString(37, 16, 'meJxzrw1KnFAOQe61QXRAdLZuYF' +
          'HuwnYIoqddyIjO1tHIakwzaWc1HkNoYSlB7VQMZ+K1ELSUGHMocSF' +
          'J9sKLFMpjgZ6pmnaJihJ7aWcjWmTRoQrAtAsAxiXG8w==');
        SBMP[1] := BitmapFromString(39, 16, 'meJxzqwl0qwlM6CuDIDcwlz5oYC' +
          '2ls73IKGdBKwTR30ZkNCCW0tQBBG2kugOwmkZre/GbQwt7iTeEin6' +
          'nRAsZboCUCZSEFalpD7ksonpqHFRZntb2okUina1DthEAClrmig==');
        SBMP[2] := BitmapFromString(43, 16, 'meJxzrQ5wBaO4vlI4coUJ0hMhO2' +
          'Cg3ICJsue3ANHA2o6MBtZ2OjuGoANo6hhMk+npBjxm0scNBE2jaWg' +
          'QbwiNkgcZuqiSVuEFICUBOLAZh57phFqOoacb0OJ6AK3GtB0AjuAl' +
          '9Q==');
        SBMP[3] := BitmapFromString(35, 15, 'meJxL6C9P6C93rwmkNUoAW0Qfu9' +
          'BQzsI2+tiCiehmEdWtJtIWyu1CM4FGduHSTnUP4ldPUqjit5cYh5F' +
          'qHZq9kAxLhvdJsgheMtA00VJoMjGIPkXcgNgCANcMfTY=');
        SBMP[4] := BitmapFromString(30, 13, 'meJxL6C9P6C93rwmkOkoAm0wjw5' +
          'FRzsI2IKKRsciIdiZTxQo8xlJoC5ouahmOSwvlhuNXTLb7iXQGGVF' +
          'Ahu9oEdHEW0G2yQRtAQA8T9+u');
      end;
  end;

  for i:=0 to High(SB) do
  begin
    for ib:=0 to hb do
    begin
      if (Result.X > 0) or (Result.Y > 0) then Break;
      if (SB[i].X1 > SB[i].X2) or (SB[i].Y1 > SB[i].Y2) then Continue;

      if findDeformedBitmapToleranceIn(SBMP[ib], x, y, SB[i].X1-2, SB[i].Y1-2,
        SB[i].X2+2, SB[i].Y2+2, 2, 4, False, Saccuracy) then
        begin
          Result := Point(x + 20, y + 7);
          warn('Matching sign found at : ' + ToStr(Result), WT_RANDOM);
          Break;
        end;
    end;
  end;

  for ib:=0 to hb do
    freeBitmap(SBMP[ib]);
end;

(**
 * Author: DannyRS
 * Last Modified: 06/02/2014 by Flight
 * Description: Attemps to solve the Drill Demon random
 *)
function DD_Solve(): boolean;
var
  T : Timer;
  p : TPoint;
  tmpCompass, MMoves, debugColorCount: Integer;
  MatName, LastMatt: String;
begin
  Result := False;

  if (not isLoggedIn) then Exit;

  T.start();
  tmpCompass := Round(getCompassAngle());

  setAngle(ANGLE_LOW);
  setCompass(0);

  repeat
    Result := tabExists(TAB_MAGIC);

    if (Result) then Break;

    if (not DD_TalkDemon) then
    begin
      DD_ResetPosition();
      Continue;
    end;

    Wait(RandomRange(1200, 1600));

    debugColorCount := countColor(0, MCX1, MCY1, MCX2, MCY2);
    case debugColorCount of
      687,988,691 : MatName := 'jog';
      707,711     : MatName := 'starjumps';
      569,573     : MatName := 'situps';
      637,938,641 : MatName := 'pushups';
      else
      begin
        clickContinue(True);
        Continue;
      end;
    end;
    warn('Last color count: ' + inttostr(debugColorCount), WT_RANDOM);
    LastMatt := '';
    if (LastMatt = MatName) then
    begin
      MMoves := 0;

      warn('Already standing on the matt : ' + MatName, WT_RANDOM);
      warn('Using matt : ' + MatName + ' again', WT_RANDOM);

      repeat
        inc(MMoves);
        humanMMouse(point(246,184), 40, 30);
        if waitUpTextMulti(['Use','xercise','mat'], 300) then
        begin
          fastClick(MOUSE_RIGHT);
          if waitOption('Use', 400) then
          begin
            Wait(RandomRange(1200, 1500));
            if waitFunc(@areTalking, 50, 15000) then
            begin
              warn('Used matt successfully', WT_RANDOM);
              LastMatt := MatName;
              Break;
            end else
            begin
              warn('Failed to use matt', WT_RANDOM);
              Break;
            end;
          end;
        end;
      until(MMoves > 10);

      Continue;
    end;

    warn('Walking to center to search for sign', WT_RANDOM);

    if not DD_ResetPosition() then
    begin
      warn('Failed to walk to center', WT_RANDOM);
      Continue;
    end;

    warn('Searching for sign : ' + MatName, WT_RANDOM);

    p := DD_FindSign(MatName);

    if (p.x < 0) or (p.y < 0) then
    begin
      warn('Failed to find sign : ' + MatName, WT_RANDOM);
      Continue;
    end;

    MMoves := 0;
    warn('Searching for matt : ' + MatName, WT_RANDOM);

    repeat
      inc(MMoves);
      humanMMouse(point(p.x-10,p.y+64), 50, 30);

      if waitUpTextMulti(['Use','xercise','mat'], 300) then
      begin
        fastClick(MOUSE_RIGHT);
        if waitOption('Use', 400) then
        begin
          Wait(RandomRange(1200, 1500));
          if (waitFunc(@areTalking, 50, 15000)) then
          begin
            warn('Used matt successfully', WT_RANDOM);
            LastMatt := MatName;
            Break;
          end else
          begin
            warn('Failed to use matt', WT_RANDOM);
            Break;
          end;
        end;
      end;
    until(MMoves > 10);

    Result := tabExists(TAB_MAGIC);

  until(Result) or (T.timeElapsed > 240000);

  if (not Result) then
  begin
    if (T.timeElapsed > 240000) then
      warn('DrillDemon solver timed out', WT_RANDOM);
  end else
    Wait(RandomRange(1200,1600));

  setAngle(ANGLE_HIGH);
  setCompass(tmpCompass);
end;
