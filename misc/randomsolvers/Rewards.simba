{
=======
Rewards
=======
}

const
  DTM_REWARD_COUNT   = 3;
  DTM_REWARD_MYSTERY = 0;
  DTM_REWARD_LAMP    = 1;
  DTM_REWARD_BOOK    = 2;

  BMP_REWARD_COUNT   = 1;
  BMP_STRANGE_BOX    = 0;

function RD_GetDTMs(): TIntegerArray;
begin
  setLength(result, DTM_REWARD_COUNT);
  result[DTM_REWARD_MYSTERY] := DTMFromString('mlwAAAHicY2dgYMhhYmBIBeJcIC4G4hIgzgTiFCCeycjAMAGIe4F4EhDPAeIlQDwPiGdHigJ1MzHMtBNlmBIqwtBsJgTmTw0TZeBngAB+JAzjM+LBUAAA3YEMSA==');
  result[DTM_REWARD_LAMP]    := DTMFromString('mwQAAAHic42RgYHjExsDwEIjvAPE1IL4AxLegYq+B+AUQ5zAyMKQBcToUZwJxPhAXAHEuEGcA8dQpQkDTGPFiZiBJCOM3AYLhAAATaQ1A');
  result[DTM_REWARD_BOOK]    := DTMFromString('mrAAAAHic42BgYHBiYmCwBmIfIPYCYlcmiJglFD8CqrkFxHeA+BkQvwDiD0D8FsovyM5mCDGTZPA2EGcwVxZk8DMUZ/DT4WIIN5cCs/mBavBhRgIYBgCtoQ8M');
end;

function RD_GetBMPs(): TIntegerArray;
begin
  setLength(result, BMP_REWARD_COUNT);
  result[BMP_STRANGE_BOX] := BitmapFromString(25, 14, 'meJxjZGDIyMjHgwIDIzARXLatbQ' +
                             'IQARmMDAyMhIzChSCGYDUqOjoJWRaI/P1DIcjHJxiCsJpDjFFoyNM' +
                             '7gEijYuNSB6FR8Qnpg9CoxMTMQWhUSkr2wBoFF0HLOCQZFRYWi2yI' +
                             'goIBnjyIx6iQkCi4OUBDIAgA/5a/xA==');
end;

(**
 * Author: Coh3n
 * Description: Returns true if one of the reward DTMs are found.
 * Updated: 5/06/2012 - [J]ustin
 *)
function RD_Detect(): boolean;
var
  i, x, y: integer;
  DTMs: TIntegerArray;
begin
  if ((not isLoggedIn()) or (not gameTab(TAB_INV))) then
    exit;

  DTMs := RD_GetDTMs();

  // loop through reward DTMs
  for i := 0 to high(DTMs) do
    if (findDTM(DTMs[i], x, y, MIX1, MIY1, MIX2, MIY2)) then
    begin
      result := true;
      break;
    end;

  for i:=0 to high(DTMs) do
    freeDTM(DTMs[i]);
end;

(**
 * Author: Coh3n
 * Description: Solves the Mystery Box (at coords x, y) inventory random.
 *)
function RD_SolveMystery(x, y: integer): boolean;
begin
  warn('Found mystery box', WT_RANDOM);

  brakeMMouse(point(x,y), 5, 5, false);
  if (waitUptext('pen', 200)) then
  begin
    result := true;
    fastClick(MOUSE_LEFT);
    wait(randomRange(1200, 1800)); // 2-3 game ticks to stop the random repeating
    warn('Clicked mystery box', WT_RANDOM);
  end;
end;

(**
 * Author: Coh3n
 * Update: J J/Justin - OSR
 * Description: Solves XP rewards (at coords x, y) with 'uptext'.
 *)
function RD_SolveXP(x, y: integer; uptext: string): boolean;
var
  Box    : TBox;
  Slot,p : TPoint;
  skill  : integer;
begin
  humanMMouse(point(x,y), 3, 3);
  if (waitUptext(uptext, 300)) then
  begin
    fastClick(MOUSE_LEFT);
    warn('Clicked XP reward', WT_RANDOM);

// the color of the HP logo
    if (not waitFindColor(p, 85981, 5, AREA_MS, 5000)) then
    begin
      warn('XP reward could not open', WT_RANDOM);
      exit(false);
    end;

// in case of runtime out of range
    if (Me.LampSkill < 0) then
      skill := SKILL_MINING
    else
      skill := Me.lampSkill;

    // slot returned by gridBox below
    case skill of
      SKILL_ATTACK              : slot := Point(0, 0);
      SKILL_STRENGTH            : slot := Point(1, 0);
      SKILL_RANGE               : slot := Point(2, 0);
      SKILL_MAGIC               : slot := Point(3, 0);
      SKILL_DEFENCE             : slot := Point(4, 0);
      SKILL_HITPOINTS, SKILL_HP : slot := Point(0, 1);
      SKILL_PRAYER              : slot := Point(1, 1);
      SKILL_AGILITY             : slot := Point(2, 1);
      SKILL_HERBLORE            : slot := Point(3, 1);
      SKILL_THIEVING            : slot := Point(4, 1);
      SKILL_CRAFTING            : slot := Point(5, 1);
      SKILL_RUNECRAFTING        : slot := Point(0, 2);
      SKILL_SLAYER              : slot := Point(1, 2);
      SKILL_FARMING             : slot := Point(2, 2);
      SKILL_MINING              : slot := Point(3, 2);
      SKILL_SMITHING            : slot := Point(4, 2);
      SKILL_FISHING             : slot := Point(5, 2);
      SKILL_COOKING             : slot := Point(0, 3);
      SKILL_FIREMAKING          : slot := Point(1, 3);
      SKILL_WOODCUTTING         : slot := Point(2, 3);
      SKILL_FLETCHING           : slot := Point(3, 3);
      SKILL_CONSTRUCTION        : slot := Point(4, 3);
      SKILL_HUNTER              : slot := Point(5, 3);

      else
        slot := Point(3, 2); // Mining
    end;

    if (Slot.y > 0) then
    begin
      Box.X1 := 173 + Slot.x * 32;
      Box.Y1 := 164 + (Slot.y - 1) * 28;
      Box.X2 := 197 + Slot.x * 32;
      Box.Y2 := 188 + (Slot.y - 1) * 28;
    end else
    begin
      Box.X1 := 189 + Slot.x * 32;
      Box.Y1 := 134 + Slot.y * 28;
      Box.X2 := 213 + Slot.x * 32;
      Box.Y2 := 158 + Slot.y * 28;
    end;

    mouseBox(Box, MOUSE_LEFT); // click skill

    wait(500 + random(500));
    brakeMMouse(point(253,277), 5, 5, False);
    fastClick(MOUSE_LEFT);
    warn('Solved experience reward', WT_RANDOM);
    wait(2000 + random(500));
    clickContinue(true);
    result := true;
  end;
end;

(**
 * Author: Coh3n
 * Description: Solves the Gene Lamp (at coords x, y) inventory random.
 *)
function RD_SolveLamp(x, y: integer): boolean;
begin
  warn('Found experience lamp', WT_RANDOM);
  result := RD_SolveXP(x, y, 'amp');
end;

(**
 * Author: Coh3n
 * Description: Solves the Book of Knowledge (at coords x, y) inventory random.
 *)
function RD_SolveBook(x, y: integer): boolean;
begin
  warn('Found Book of Knowledge', WT_RANDOM);
  result := RD_SolveXP(x, y, 'ook');
end;

(**
 * Author: Slushpuppy
 * Description: Solves the Strange Box (at coords x, y) inventory random.
 *)
function RD_SolveStrangeBox(x, y: integer): boolean;
begin
  warn('Found StrangeBox box', WT_RANDOM);
  //Result := solvebox;
  Result := False;
end;

(**
 * Author: Coh3n
 * Description: Loops through the rewards DTMs. If one is found, calls the
 * corresponding solve function. Returns true if solved.
 * Now checks uptext before dropping the item and points the user to report false positives.
 *)
function RD_Solve(): boolean;
var
  i, x, y: integer;
  DTMs, BMPs: TIntegerArray;
begin
  if not isLoggedIn() then
    exit;

  gameTab(TAB_INV);
  DTMs := RD_GetDTMs();
  BMPs := RD_GetBMPs();

  for i := 0 to high(DTMs) do
    if (findDTM(DTMs[i], x, y, MIX1, MIY1, MIX2, MIY2)) then
    begin
      case i of
        DTM_REWARD_MYSTERY : result := RD_SolveMystery(x, y);
        DTM_REWARD_LAMP    : result := RD_SolveLamp(x, y);
        DTM_REWARD_BOOK    : result := RD_SolveBook(x, y);
      end;

      if (not result) then
      begin
        warn('Did not solve reward', WT_RANDOM);
        brakeMMouse(point(x,y), 7, 7, false);
        if waitUpTextMulti(['andom','event','ift','pen','amp','ook'], 618 + Random(200)) then
        begin
          warn('Dropping item as a failsafe', WT_RANDOM);
          fastClick(MOUSE_RIGHT);
          waitOption('rop', 200+Random(800));
        end else
          warn('Falsely identified item: ' + getUpText(), WT_RANDOM);

        result := true;
      end;

      break;
    end;

  if (not result) then
    for i := 0 to high(BMPs) do
      if findBitmapIn(BMPs[i], x, y, MIX1, MIY1, MIX2, MIY2) then
      begin
        case i of
          BMP_STRANGE_BOX : result := RD_SolveStrangeBox(x, y);
        end;

        if (not result) then
        begin
          warn('Did not solve reward', WT_RANDOM);
          brakeMMouse(point(x,y), 7, 7, false);
          if waitUpTextMulti(['andom','event','ift','pen','amp','ook'], 618 + Random(200)) then
          begin
            warn('Dropping item as a failsafe', WT_RANDOM);
            fastClick(MOUSE_RIGHT);
            waitOption('rop', randomRange(150,300));
          end else
            warn('Falsely identified item: ' + getUpText(), WT_RANDOM);

          result := true;
        end;

        break;
      end;

  for i:=0 to high(DTMs) do
    freeDTM(DTMs[i]);

  for i:=0 to high(BMPs) do
    freeBitmap(BMPs[i]);
end;
