{
======
Player
======
}

{ type TPlayer;
  Description: The User Record. }
type TPlayer = record
    Name      : string;                  // * User Name
    Pass      : string;                  // * User Pass
    Nick      : string;                  // * Screen Name for random detection
    Pin       : string;                  // * Current Users Pin Number
    WorldList : TIntegerArray;           // * List of preferred worlds
    Level     : array[0..24] of Integer; // * Levels of all skills.
    Active    : Boolean;                 // * Set to True if Ok, False if Lost.
    Model     : TEntity;                 // * Player's specific entity
    ModelSet  : Boolean;                 // * Has the player's model been set
    Status    : string;                  // * User Status
    Random    : string;                  // * Current random event
    LampSkill : Integer;                 // * Preferred skill to be increased upon upon XP reward
    Worked    : Integer;                 // * Time User has worked
    Booleans  : array of Boolean;        // * For reports, etc.
    Integers  : TIntegerArray;           // * For reports, etc.
    Strings   : array of string;         // * For reports, etc.
    Extendeds : array of Extended;       // * For reports, etc.
    Arrays    : array of TVariantArray;  // * For custom arrays.
  end;

var
  Me : TPlayer;

{ const Skills consts
  Description: To be used with Players.Level[] array
  Players woodcutting level: Players[i].Level[Skill_WoodCutting]
  Last Edit: 22 June 2010 -- Nava2
}
const
  SKILL_COUNT         = 25;
  SKILL_ATTACK        = 0;
  SKILL_DEFENCE       = 1;
  SKILL_STRENGTH      = 2;
  SKILL_HITPOINTS     = 3;    SKILL_HP = SKILL_HITPOINTS;
  SKILL_RANGE         = 4;
  SKILL_PRAYER        = 5;
  SKILL_MAGIC         = 6;
  SKILL_COOKING       = 7;
  SKILL_WOODCUTTING   = 8;
  SKILL_FLETCHING     = 9;
  SKILL_FISHING       = 10;
  SKILL_FIREMAKING    = 11;
  SKILL_CRAFTING      = 12;
  SKILL_SMITHING      = 13;
  SKILL_MINING        = 14;
  SKILL_HERBLORE      = 15;
  SKILL_AGILITY       = 16;
  SKILL_THIEVING      = 17;
  SKILL_SLAYER        = 18;
  SKILL_FARMING       = 19;
  SKILL_RUNECRAFTING  = 20;
  SKILL_HUNTER        = 21;
  SKILL_CONSTRUCTION  = 22;
  SKILL_COMBAT        = 23;
  SKILL_TOTAL         = 24;

function TPlayer.inCombat(): Boolean;
var
  B   : TBox;
  Pnt : TPoint;
begin
  if Self.ModelSet then
  begin
    B      := Self.Model.FullTPA.getBounds();
    Pnt    := Point(B.CX, B.Y1);
    B.X1   := Pnt.X-25;
    B.Y1   := Pnt.Y-25;
    B.X2   := Pnt.X+25;
    B.Y2   := Pnt.Y;
    Result := foundHPBarIn(B);
  end else
    Result := foundHPBarIn(toBox(220, 120, 295, 168));
end;

Procedure definePlayerModel(maxW, maxH: Integer);
var
  b     : TBox;
  T     : Timer;
  P,P2  : TPoint;
  X,Y   : Integer;
  tTPA  : TPointArray;
  pCols : TIntegerArray;
label
  Start;
begin
  Start:
  showMessage('Hover the mouse over your players chest for 1 second');
  wait(500);
  T.start();
  repeat
    if isMouseInClient() then
    begin
      P := getRealMousePnt();
      brakeMMouse(P, 0, 0, False);
      if not pointsMatch(getRealMousePnt(), P) then
        T.start();
    end;
  until((T.timeElapsed > 1000));

  if isMouseInClient() then
    P := getRealMousePnt();

  showMessage('Hover the mouse over your players legs for 1 second');
  wait(500);
  T.start();
  repeat
    if isMouseInClient() then
    begin
      P2 := getRealMousePnt();
      brakeMMouse(P2, 0, 0, False);
      if not pointsMatch(getRealMousePnt(), P2) then
        T.start();
    end;
  until((T.timeElapsed > 1000));

  if isMouseInClient() then
    P2 := getRealMousePnt();

  Me.Model.define(P, P2);
  Me.Model.Update();
  b := Me.Model.Bounds;

  if ((b.Width > maxW) and (b.Height > maxH)) then
  begin
    showMessage('Inaccurate selection, please try again');
    wait(1500);
    GoTo Start;
  end;

  Me.ModelSet := True;
  warn('Player entity defined', WT_CORE);
end;

function getDisplayName(): String;
var
  xMod,Y,B : Integer;
begin
  B := BitmapFromString(3, 15, 'meJxLKGtIAKPGuWs6l25uXrAOjoA' +
        'iLYs3AQWBDLggUARCMjAwIIsD2VgRRAqoGKgFLlIzexVcF5AEWgEA' +
        'K3dMew==');

  cs_findBitmapToleranceIn(B, xMod, Y, 10, toBox(10,458,150,478), cs_CTS);
  freeBitmap(B);
  if Y < 458 then Exit;

  result := getTextAtExWrap(10, 460, xMod, 476, 0, 5, 2, 0, 1, 'SmallChars07');
end;

(*
TakeScreen
~~~~~~~~~~

.. code-block:: pascal

    procedure takeScreen(Reason: string; Path: string);

.. note::

    by Mutant, Squirrle, Yakman, & Harry
    Last Modified: Dec. 5th, 2013 by Flight

Example:

.. code-block:: pascal

  takeScreen('Prison Pete');
    or
  takeScreen('Prison Pete', includePath + 'AeroLib/screenshots/antirandoms/');

*)
procedure takeScreen(Reason: string; Path: string = includePath+'AeroLib/screenshots/');
begin
  if (not directoryExists(Path)) then
    forceDirectories(Path);

  try
    saveScreenshot(Path + Reason + ' ' + Me.Name + ' ' + theDate(Date_Day) + '.png');
    WriteLn('Screenshot of: ' + reason + ' ' + TimeRunning);
  except
    Writeln('Failed to save screenshot of: ' + reason);
  end;
end;
