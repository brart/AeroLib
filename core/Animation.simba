{
=========
Animation
=========
}

(*
PixelShiftMulti
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function pixelShiftMulti(B: TBoxArray; T: Integer): TIntegerArray;

Calculates how many pixels change in boxes B during time T.

.. note::

    Author: marpis
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    PixelShiftArray := PixelShiftMulti(box, 5000);
*)
function pixelShiftMulti(B: TBoxArray; T: Integer): TIntegerArray;
Var
  L, I: Integer;
  BMP, BMP2: TIntegerArray;
begin
  L := Length(B);
  SetLength(BMP, L);
  SetLength(BMP2, L);
  SetLength(Result, L);

  for I := 0 to (L - 1) do
    BMP[I] := bitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  Wait(T);
  for I := 0 to (L - 1) do
    BMP2[I] := bitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  for i := 0 to (L - 1) do
    result[i] := calculatePixelShift(BMP[i],BMP2[i],IntToBox(0,0,(b[i].x2 - b[i].x1),(b[i].y2-b[i].y1)));
  for I := 0 to (L - 1) do
  begin
    freeBitmap(BMP[I]);
    freeBitmap(BMP2[I]);
  end;
end;

(*
PixelShift
~~~~~~~~~~

.. code-block:: pascal

    function pixelShift(B: TBox; T: Integer): Integer;

Calculates how many pixels change in boxes B during time T.

.. note::

    Author: marpis
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    Result := (pixelShift(box, 5000) > 2000);
*)
function pixelShift(B: TBox; Time: Integer): Integer;
var
  TIA: TIntegerArray;
begin
  TIA := PixelShiftMulti([B], Time);
  Result := TIA[0];
end;

(*
AveragePixelShift
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function averagePixelShift(B: TBox; waitPerloop, maxTime: Integer): Integer;

Gets the average pixel shift every 'waitPerLoop' ms over the time 'maxTime'

.. note::

    Author: Coh3n
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    Result := (averagePixelShift(box, 500, 5000) > 2000);
*)
function averagePixelShift(b: TBox; waitPerLoop, maxTime: integer): integer;
var
  T : Timer;
  shifts: TIntegerArray;
begin
  T.start();

  while (T.timeElapsed < maxTime) do
  begin
    setLength(shifts, length(shifts)+1);
    shifts[high(shifts)] := pixelShift(b, waitPerLoop);
  end;

  result := averageTIA(shifts);
end;

function getPixelShiftTPA(T: Integer; TPA: TPointArray): Integer;
Var
  BMP,BMP2: Integer;
begin
  BMP := bitmapFromClient(MSx1,MSy1,MSx2,MSy2);
  Wait(T);
  BMP2 := bitmapFromClient(MSx1,MSy1,MSx2,MSy2);

  Result := calculatePixelShiftTPA(BMP, BMP2, TPA);
  freeBitmap(BMP);
  freeBitmap(BMP2);
end;

(*
Animating
~~~~~~~~~~~~~~

.. code-block:: pascal

    function animating(B: TBox; Time, MinCount: Integer): Boolean;

Finds constant animation in box B during time T. If PixelShift in box is
smaller than MinCount, it's considered not animating.

.. note::

    Author: marpis
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

*)
function isAnimating(B: TBox; Time, MinCount: Integer): Boolean;
begin
  result := (pixelShift(B, 50) >= MinCount);
end;
