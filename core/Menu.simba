{
====
Menu
====
}

Type TOptions = Record
  Str: string;
  Bounds, BigBox: TBox;
end;

function isLoggedIn(): Boolean; forward;
function menuOpen(): Boolean;
begin
  if not isLoggedIn() then
    Exit;

  result := (createCol(4674653,0).count(toBox(0,0,757,502)) >= 100);
end;

function getOptions(): Array of TOptions;
var
  i,w,h,bmp,target : Integer;
  B,BB,BigBox,Yoff,
  TextSearchBox    : TBox;
  TPA,TPA1         : TPointArray;
  ATPA,tempatpa    : T2DPointArray;
begin
  target := getImageTarget();
  getClientDimensions(B.X2, B.Y2);

  B := toBox(0, 0, B.X2 - 1, B.Y2 - 1);
  createCol(4674653,0).findAllIn(B, TPA);
  if (length(TPA) < 100) then
    Exit;

  B := TPA.getBounds();
  BigBox := B;
  Yoff := toBox(B.X1, B.Y1 + 18, B.X2, B.Y2);
  cs_findColorsTolerance(TPA1, 0, 0, Yoff, cs_CTS3);

  ATPA := clusterTPA(TPA1, 1);
  sortATPASize(ATPA, true);
  if Length(ATPA) > 0 then
    TextSearchBox := ATPA[0].getBounds();

  combineTPAWrap(TPA, TPA1, TPA);
  if (length(TPA) < 10) then
    Exit;

  TPA1 := TPAFromBox(TextSearchBox);
  clearTPAFromTPAWrap(TPA1, TPA, TPA1);

  bmp := createBitmap(TextSearchBox.X2 - TextSearchBox.X1 + 1, TextSearchBox.Y2 - TextSearchBox.Y1 + 1);
  offSetTPA(TPA1, Point(-TextSearchBox.X1, -TextSearchBox.Y1));

  drawTPABitmap(bmp, TPA1, clRed);
  getbitmapSize(bmp, w, h);
  setTargetBitmap(bmp);

  SetLength(ATPA, h div 15);
  for i:=0 to High(ATPA) do
    createCol(clRed,0).findAllIn(toBox(0,2+(i*15),w-1,15+(i*15)), ATPA[i]);

  sortATPAFromFirstPointY(ATPA, Point(w div 2, 0));
  setArrayLength(Result, Length(ATPA));
  if Length(Result) > 0 then
  Result[0].BigBox := BigBox;
  for i:=0 to high(ATPA) do
  begin
    TPA := ATPA[i];
    tempatpa := clusterTPAEx(TPA, 1, 10);
    sortATPAFromFirstPointX(tempatpa, Point(0, 0));
    Result[i].Str := getTextATPA(tempatpa, 5, 'UpChars07');
    BB := ATPA[i].getBounds();
    Result[i].Bounds := toBox(BB.X1 + Yoff.X1, BB.Y1 + Yoff.Y1,
                Result[0].BigBox.X2, BB.Y2 + Yoff.Y1);
    setlength(tempatpa,0);
    setlength(TPA,0);
  end;
  setImageTarget(target);
  freeBitmap(bmp);
end;

function exitMenu(): Boolean;
var
  T   : Timer;
  x,y : Integer;
begin
  result := false;
  T.start();
  while (T.timeElapsed() < 3000) do
  begin
    getMousePos(X, Y);
    humanMMouse(Point(x,y-10), 0, 0);
    if not menuOpen() then
      break;
  end;
  result := not menuOpen();
end;

function optionExistsMulti(Texts: TStringArray): Boolean;
var
  i : Integer;
  Options : array of TOptions;
begin
  result  := False;
  Options := getOptions();
  if (Length(Options) < 1) then
    Exit(False);

  for i:=0 to high(Options) do
    if arrInStr(Texts, Options[i].Str) then
      exit(true);
end;

function chooseOptionMulti(Texts: TStringArray): Boolean;
var
  B          : TBox;
  T          : Timer;
  i,X,Y,ms,
  R,x2,y2  : Integer;
  Options    : array of TOptions;
begin
  Options := getOptions();
  if (Length(Options) < 1) then
    Exit(False);
  ms := MouseSpeed;
  MouseSpeed := RandomRange(13,17);

  for i:=0 to high(Options) do
  begin
    if ArrInStr(Texts, Options[i].Str) then
    begin
      B := Options[i].Bounds;
      getMousePos(x2, y2);
      R:= Min(((B.X2 - B.X1) shr 1), 5);
      if not pointInBox(Point(x2,y2), B) then
        mouseBox(B.x1+R, B.Y1, B.x2-R, B.Y1+5, R, MOUSE_LEFT)
      else
        fastClick(MOUSE_LEFT);

      MouseSpeed := ms;
      Exit(True);
    end;
  end;

  exitMenu;
  MouseSpeed := ms;
end;

function chooseOption(Txt: String): Boolean;
begin
  Result := chooseOptionMulti([Txt]);
end;

function waitOptionExistsMulti(S: TStringArray; Time: Integer): Boolean;
var
  T : Timer;
begin
  Result := False;
  T.start();
  while (T.timeElapsed() < Time) do
  begin
    if optionExistsMulti(S) then
      Exit(True);
    Wait(20 + Random(10));
  end;
end;

function waitOptionMulti(S: TStringArray; Time: Integer): Boolean;
var
  T : Timer;
begin
  Result := False;
  T.start();
  while (T.timeElapsed() < Time) do
  begin
    if chooseOptionMulti(S) then
      Exit(True);
    Wait(20 + Random(10));
  end;
end;

function waitOption(S: string; Time: Integer): Boolean;
begin
  Result := waitOptionMulti([S], Time);
end;
