{
=======
ColorEx
=======
}

Type TColEx = record
  Col   : Integer;
  Tol   : Integer;
  hMod  : Extended;
  sMod  : Extended;
end;


{
procedure TColEx.create(Col, Tol: Integer; hMod, sMod: Extended);
begin
  Self.Col  := Col;
  Self.Tol  := Tol;
  Self.hMod := hMod;
  Self.sMod := sMod;
end;

procedure TColEx.create(Col, Tol: Integer); overload;
begin
  Self.Col  := Col;
  Self.Tol  := Tol;
  Self.hMod := 0.2;
  Self.sMod := 0.2;
end;
}

function createColEx(Col, Tol: Integer; hMod, sMod: Extended): TColEx;
begin
  Result.Col  := Col;
  Result.Tol  := Tol;
  Result.hMod := hMod;
  Result.sMod := sMod;
end;

function createCol(Col, Tol: Integer): TColEx;
begin
  Result.Col  := Col;
  Result.Tol  := Tol;
  Result.hMod := 0.2;
  Result.sMod := 0.2;
end;

function TColEx.findIn(Area: TBox; var Point: TPoint): Boolean;
var
  tmpCTS : Integer;
begin
  tmpCTS := getToleranceSpeed();
  if ((Self.hMod <> 0.2) or (Self.sMod <> 0.2)) then
  begin
    setColorToleranceSpeed(2);
    setToleranceSpeed2Modifiers(Self.hMod, Self.sMod);
  end;
  checkAreaBounds(Area);
  Result := findColorTolerance(Point.x, Point.y, Self.Col, Area.X1, Area.Y1, Area.X2, Area.Y2, Self.Tol);
  setColorToleranceSpeed(tmpCTS);
end;

function TColEx.findIn(Area: TBox): Boolean; overload;
var
  pnt    : TPoint;
  tmpCTS : Integer;
begin
  tmpCTS := getToleranceSpeed();
  if ((Self.hMod <> 0.2) or (Self.sMod <> 0.2)) then
  begin
    setColorToleranceSpeed(2);
    setToleranceSpeed2Modifiers(Self.hMod, Self.sMod);
  end;
  checkAreaBounds(Area);
  Result := findColorTolerance(Pnt.x, Pnt.y, Self.Col, Area.X1, Area.Y1, Area.X2, Area.Y2, Self.Tol);
  setColorToleranceSpeed(tmpCTS);
end;

function TColEx.findAllIn(Area: TBox; var Points: TPointArray): Boolean;
var
  tmpCTS : Integer;
begin
  tmpCTS := getToleranceSpeed();
  if ((Self.hMod <> 0.2) or (Self.sMod <> 0.2)) then
  begin
    setColorToleranceSpeed(2);
    setToleranceSpeed2Modifiers(Self.hMod, Self.sMod);
  end;
  checkAreaBounds(Area);
  Result := findColorsTolerance(Points, Self.Col, Area.X1, Area.Y1, Area.X2, Area.Y2, Self.Tol);
  setColorToleranceSpeed(tmpCTS);
end;

function TColEx.count(Area: TBox): Integer;
var
  tmpCTS : Integer;
begin
  tmpCTS := getToleranceSpeed();
  if ((Self.hMod <> 0.2) or (Self.sMod <> 0.2)) then
  begin
    setColorToleranceSpeed(2);
    setToleranceSpeed2Modifiers(Self.hMod, Self.sMod);
  end;
  checkAreaBounds(Area);
  Result := countColorTolerance(Self.Col, Area.X1, Area.Y1, Area.X2, Area.Y2, Self.Tol);
  setColorToleranceSpeed(tmpCTS);
end;

function TColEx.findPie(Area: TBox; StartD, EndD, MinR, MaxR: Extended; MidX, MidY: Integer; var Points: TPointArray): Boolean;
var
  tmpCTS : Integer;
  tmpRes : Boolean;
begin
  tmpCTS := getToleranceSpeed();
  if ((Self.hMod <> 0.2) or (Self.sMod <> 0.2)) then
  begin
    setColorToleranceSpeed(2);
    setToleranceSpeed2Modifiers(Self.hMod, Self.sMod);
  end;
  checkAreaBounds(Area);
  tmpRes := Self.findAllIn(Area, Points);
  setColorToleranceSpeed(tmpCTS);
  if not tmpRes then Exit(false);
  filterPointsPie(Points, StartD, EndD, MinR, MaxR, MidX, MidY);
  Result := (length(Points) > 0);
end;

// By ProphesyOfWolf
procedure TColEx.autoCreate(colors: TIntegerArray);
Var
  h, s, t: Extended;
  I,II : integer;
  HSLColor : Array[1..3] of Extended;
  HSL : Array[0..1] of Array[1..3] of Extended;
begin
  For I:= 1 to 3 do
  begin;
    HSL[0][i] := 255;
  end;

  For I:= 0 to High(Colors) do
  begin;
    ColortoHSL(Colors[i],HSLColor[1],HSLColor[2],HSLColor[3]);
    For II:= 1 to 3 do
    begin;
      HSL[0][II] := MinE(HSLColor[II],HSL[0][II]);
      HSL[1][II] := MaxE(HSLColor[II],HSL[1][II]);
    end;
  end;

  H := (HSL[1][1] - HSL[0][1]);
  S := (HSL[1][2] - HSL[0][2]);
  T := (HSL[1][3] - HSL[0][3]);

  try
    Self.hMod := (H/T);
    Self.sMod := (S/T);
    Self.Tol  := Round(t);
  except
    Self.hMod := 0;
    Self.sMod := 0;
    Self.Tol  := Round(0.0);
  end;

  Self.Col := HSLToColor((HSL[1][1] + HSL[0][1]) / 2,(HSL[1][2] + HSL[0][2]) / 2,(HSL[1][3] + HSL[0][3]) / 2);
end;
