(*
Math
====

Supporting math functions.

.. contents::

*)

const
  MATH_PI = 3.14159265358979320;
  MATH_2PI = MATH_PI * 2.0;
  MATH_PIOVER2 = MATH_PI / 2.0;
  MATH_PIOVER3 = MATH_PI / 3.0;
  MATH_PIOVER4 = MATH_PI / 4.0;
  MATH_PIOVER6 = MATH_PI / 6.0;

var
   SineArray, Cosearray: array[0..360] of Extended;
   
(*
LoadCoSineArrays
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure LoadCoSineArrays;

Load default sin/cos values. Used internally for SRL

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

*)
procedure LoadCoSineArrays;
var
  i: Integer;
  pi_const: extended;
begin
  pi_const := Pi; // not necessary, but might as well.
  for i := 0 to 360 do
  begin
    Sinearray[i] := Sin(i * pi_const / 180.0);
    Cosearray[i] := Cos(i * pi_const / 180.0);
  end;
end;

(*
CreateTPAFromText
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function CreateTPAFromText(Txt : string; Chars : string) : TPointArray;

Returns the TPointArray of the inputted Text.

.. note::

    by MastaRaymond

Example:

.. code-block:: pascal

*)
function CreateTPAFromText(Txt: string; Chars: string) : TPointArray;
var
  w,h : integer;
begin;
  result := TPAFromText(Txt,Chars,w,h);
end;

(*
RBoolEx
~~~~~~~

.. code-block:: pascal

    function RBoolEx(chance: integer): boolean;

Returns a boolean, with a chance of 1 / chance

.. note::

    by Rasta Magician

Example:

.. code-block:: pascal

*)

function RBoolEx(chance: Integer): Boolean;
begin
  Result := (0 = Random(chance));
end;

(*
RBool
~~~~~

.. code-block:: pascal

    function RBool: boolean;

Returns a boolean, with a 50% chance

.. note::

    by Rasta Magician

Example:

.. code-block:: pascal

*)
function RBool: boolean;
begin
  Result := RBoolEx(2);
end;

type
  TVector = record
    x, y: Extended;
    m: Extended;
  end;

(*
FixRad
~~~~~~

.. code-block:: pascal

    function FixRad(rad: Extended): Extended;

Returns the periodic rad in the range (0,2PI].

.. note::

  By Nava2

Example:

.. code-block:: pascal

*)
{
function FixRad(rad: Extended): Extended;  // by Nava2
begin
  result := rad;

  while (result >= MATH_2PI) do
    result := result - MATH_2PI;

  while (result < 0) do
    result := result + MATH_2PI;
end;
}


(*
AngleBetween
~~~~~~~~~~~~

.. code-block:: pascal

    function AngleBetween(v1, v2: TVector): Extended;

Calculates the angle between two TVector records. This is returned in radians
(normalized between (0, 2Pi]).

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function AngleBetween(v1, v2: TVector): Extended;
var
  a1, a2: Extended;
begin
  a1 := ArcTan2(v1.y, v1.x);
  a2 := ArcTan2(v2.y, v2.x);

  Result := fixRad(a1 - a2)
end;


(*
Normalize
~~~~~~~~~

.. code-block:: pascal

    procedure Normalize(var vect: TVector);

Converts a TVector to normal TVector (|v| = 1). 

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
procedure Normalize(var vect: TVector);
begin
  vect.x := vect.x / vect.m;
  vect.y := vect.y / vect.m;
  vect.m := 1;
end;

(*
CreateVector
~~~~~~~~~~~~

.. code-block:: pascal

    function CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;

Creates a `TVector` object. If NormalzseV is true, will set |v| = 1.

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;
begin
  Result.x := vPoint.x - Origin.x;
  Result.y := 0 - (vPoint.y - Origin.y); // inverts y axis as well
  Result.m := Sqrt(Sqr(Result.x) + Sqr(Result.y));
  if (NormalizeV) then
    Normalize(Result);
end;


(*
GetSplitPt
~~~~~~~~~~

.. code-block:: pascal

    function GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;

Returns the point on a spline, defined by control points Points, at Theta

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;
var
  i, n: Integer;
  XTemp, YTemp: Extended;
begin
  n := GetArrayLength(Points) - 1;
  for i := 0 to n do
  begin
    XTemp := XTemp + (BinCoe(n, i) * Points[i].x * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
    YTemp := YTemp + (BinCoe(n, i) * Points[i].y * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
  end;
  Result.x := Round(XTemp);
  Result.y := Round(YTemp);
end;

(*
srl_GaussRand
~~~~~~~~~~~~~

This is a functional pointer. It behaves transparently as a regular function
would. This function will behave as so: it will return a random Extended 
normally distributed with a mean of 0 and a standard deviation of 1. 

If you need more flexibility in this (ex. mean of 2), please use GaussRandom
which converts between the Standard Normal and a custom version.

.. note::

    by: SRL Development Team

Example:

.. code-block:: pascal
    

*)

var
  srl_GaussRand: function: Extended;
  srl_GaussDev_Range, srl_GaussDev_Point: Extended;

{

Helper method for cal_normal_random. Does polynomial calculation using the
`Horner Scheme`_

..http://en.wikipedia.org/wiki/Horner_scheme

}
const
  __gauss_norm_0 = 0.029899776;
  __gauss_norm_1 = 0.008355968;
  __gauss_norm_2 = 0.076542912;
  __gauss_norm_3 = 0.252408784;
  __gauss_norm_4 = 3.949846138;

function __gauss_poly(r, rsqr: Extended): Extended;
begin
  Result := __gauss_norm_0*rsqr + __gauss_norm_1;
  Result := Result*rsqr + __gauss_norm_2;
  Result := Result*rsqr + __gauss_norm_3;
  Result := Result*rsqr + __gauss_norm_4;
  Result := Result*r;
end;

(*

n2_gauss
~~~~~~~~

.. code-block:: pascal

    function n2_gauss(): Extended;

Calculates a standard normal value (N(0, 1)).

By definition, 68.2% of points will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::

    by: Nava2

*)
function n2_gauss(): Extended;
var
  r: Extended;
  i: Integer;
begin
  r := 0.0;
  for i := 0 to 11 do
    r := r + (random(MaxInt)*1.0)/MaxInt;

  r := (r-6.0)/4.0 ;
  result := __gauss_poly(r, r*r);
end;

(*

GaussMarsPolar
~~~~~~~~~~~~~~

.. code-block:: pascal

    function GaussMarsPolar(): Extended;

Calculates a standard normal value (N(0, 1]).

By definition, 68.2% of points will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::
    Please use `srl_GaussRand` instead of this function directly, feel free to
    set `srl_GaussRand` to this function if you choose. 
    Currently, this is the default.

.. note::
    by: BenLand100

*)
function GaussMarsPolar(): Extended;
begin
  Result := sqrt(-2.0*ln(RandomE()))*cos(2.0*PI*RandomE());
end;

(*

SetupGauss
~~~~~~~~~~

.. code-block:: pascal

    procedure setupGauss();

Sets up the necessary constants for the gaussian functions used in the Gaussian
math functions internally to SRL.

.. note::

   by: SRL Development Team

*)
procedure setupGauss();
begin
  srl_GaussDev_Point := 0.4;
  srl_GaussDev_Range := 0.3;
  srl_GaussRand := @GaussMarsPolar;
end;


(*
  
GaussRand
~~~~~~~~~

..code-block:: pascal

    function GaussRand(mean, dev: Extended): Extended;

Calculates a normally distributed point around mean (u) with a standard 
deviation of dev (o).

..note::

   by: Nava2

Example:

..code-block:: pascal

    // shooting arrows simulation:
    pt := Point(GaussRand(center.x, 0.5), GaussRand(center.y, 0.5));
    WriteLn(Format('Hit the target at (%d, %d).', [pt.x, pt.y]));

*)

function GaussRand(mean, dev: Extended): Extended;
begin
  result := mean + dev*srl_GaussRand();
end;


(*

Gauss_Point
~~~~~~~~~~~

.. code-block:: pascal

    procedure Gauss_Point(cX, cY: Integer; sAngle, eAngle: Extended; maxRad: Integer; out oX, oY: Integer);

Calculates a point about cX, cY with radius maxRad. The sangle and eangle are 
in radians. The point is returned in the reference parameters oX, oY.

.. note::

    by: Nava2

Example:

.. code-block:: pascal

    var
      gX, gY: Integer;
    // get a gaussian pt in a circle:
    Gauss_Point(MMCX, MMCY, 0, math_2PI, MMX2-MMCX, gX, gY);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure Gauss_Point(cX, cY: Integer; sAngle, eAngle: Extended; maxRad: Integer; out oX, oY: Integer);
var
  angle: Extended;
  radius: Extended;
  xShift, yShift: Integer;
begin

  if (eAngle < sAngle) then
    swap(eAngle, sAngle);

  { random angle about the center }
  angle := sAngle + (eAngle-sAngle)*srl_GaussRand()/2.0;

  { get normal pt about zero, where 68% lie within .5*maxRad }
  radius := GaussRand(maxRad,maxRad*srl_GaussDev_Point) - maxRad;


  { the shifting distance based on the radius and angle (both rand) }
  xShift := round(radius * Cos(angle));
  yShift := round(radius * Sin(angle));

  oX := cX + xShift;
  oY := cY + yShift;
end;

(*
GaussRange
~~~~~~~~~~

.. code-block:: pascal

    function GaussRange(minI, maxI: Extended): Extended;

Returns a number between minI and maxI that is normally distributed in the range.

.. note::

  by: Nava2

Example:

.. code-block:: pascal

    randMean := GaussRange(0, 20);

*)
function GaussRange(minI, maxI: Extended): Extended;
var
  valid: Boolean;
  mean: Extended;
  dev: Extended;
  t: Integer;
begin
  { calculate the mean }
  mean := (maxI+minI)/2.0;
  dev  := abs(maxI-minI)/2.0 * srl_GaussDev_Range; 

  t := 0;
  while ((not valid) and (t < 100)) do 
  begin
    Result := GaussRand(mean, dev);
    valid := ((Result >= minI) and (Result <= MaxI));

    inc(t);
  end;
  
end;

(*

iGaussRange
~~~~~~~~~~~

.. code-block:: pascal

    function iGaussRange(minI, maxI: Integer): Integer;

See `GaussRange` for more detail. Same function, but with integers.

.. note::

    by: Nava2

*)
function iGaussRange(minI, maxI: Integer): Integer;
begin
  Result := Round(GaussRange(minI, maxI));
end;

(*

GaussRandom
~~~~~~~~~~~

.. code-block:: pascal

    function GaussRandom(maxExt: Integer): Integer;

Computes a normally distributed number in [0, maxExt). Thus, it behaves like 
Random() would be expected to. But normally distributed about maxExt/2. 

It is a wrapper for `iGaussRange`. 

.. note::

    by Nava2

Example:

.. code-block:: pascal

*)
function GaussRandom(maxExt: Integer): Integer;
begin
  Result := iGaussRange(0, maxExt-1);
end;

(*

GaussBox
~~~~~~~~

.. code-block:: pascal

    procedure GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);

Calculates a point normally distributed from the center of the passed box. It
checks for outlying points and will regenerate points if necessary.

.. note::

    by: Nava2

Example:

.. code-block:: pascal

    var
      gX, gY: Integer;

    // get a gaussian pt in a circle:
    Gauss_Box(gX, gY, MMX1, MMY1, MMX2, MMY2);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);
begin
  px := iGaussRange(x1, x2);
  py := iGaussRange(y1, y2);

  if (not PointInBox(Point(px, py), IntToBox(x1, y1, x2, y2))) then
  begin
    Writeln('[GaussBox] Point invalid (%d, %d)');
    Exit;
  end;
end;

(*
MakeSplinePath
~~~~~~~~~~~~~~

.. code-block:: pascal

    function MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;

Returns a spline, defined by control points Points, incrementing theta by
ThetaInc

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;
var
  i: Integer;
  t: Extended;
  temp, last: TPoint;
  done: Boolean;
begin
  repeat
    if t >= 1 then
    begin
      t := 1;
      done := True;
    end;
    temp := GetSplinePt(Points, t);
    if ((temp.x <> last.x) and (temp.y <> last.y)) then
    begin
      i := i + 1;
      SetArrayLength(Result, i);
      Result[i - 1] := temp;
      last := temp;
    end;
    t := t + ThetaInc;
  until (done)
end;

(*
MidPoints
~~~~~~~~~

.. code-block:: pascal

    function MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;

Adds midpoints to Path so no distance on it is greater than MaxDist

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;
var
  i, c: Integer;
  last: TPoint;
  done: Boolean;
begin
  if (getarraylength(path) > 0) then
  begin
    repeat
      last := Path[0];
      done := True;
      for i := 1 to GetArrayLength(Path) - 1 do
      begin
        if Sqrt(Pow((Path[i].x - last.x), 2) + Pow((Path[i].y - last.y), 2)) >
          MaxDist then
        begin
          done := False;
          SetArrayLength(Path, GetArrayLength(Path) + 1);
          for c := GetArrayLength(Path) - 1 downto i + 1 do
          begin
            Path[c] := Path[c - 1];
          end;
          Path[i].x := Round((last.x + Path[i + 1].x) / 2);
          Path[i].y := Round((last.y + Path[i + 1].y) / 2);
        end;
        last := Path[i];
      end;
    until (done);
  end;
  Result := Path;
end;

(*
InAbstractBox
~~~~~~~~~~~~~

.. code-block:: pascal

    function InAbstractBox(x1, y1, x2, y2, x3, y3, x4, y4: Integer; x, y: Integer): Boolean;

Returns true if point x, y is in an abstract box defined by
*x1, y1, x2, y2, x3, y3, x4, y4*.

.. code-block:: pascal

    x1, y1     x2, y2
      +--------+
      \       /
       \     /
         +--+
   x4, y4   x3, y3

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
{
function InAbstractBox(x1, y1, x2, y2, x3, y3, x4, y4: Integer; x, y: Integer):
  Boolean;
var
  U, D, R, L: Boolean;
  UB, DB, LB, RB, UM, DM, LM, RM: Extended;
begin
  UM := (-y1 - -y2) div (x1 - x2);
  DM := (-y4 - -y3) div (x4 - x3);
  if x1 - x4 <> 0 then
  begin
    LM := (-y1 - -y4) div (x1 - x4);
  end else
  begin
    LM := Pi;
  end;
  if x2 - x3 <> 0 then
  begin
    RM := (-y2 - -y3) div (x2 - x3);
  end else
  begin
    RM := Pi;
  end;
  UB := -(UM * x1) + -y1;
  RB := -(RM * x2) + -y2;
  DB := -(DM * x3) + -y3;
  LB := -(LM * x4) + -y4;
  if (UM * x + UB >= -y) then U := True;
  if (DM * x + DB <= -y) then D := True;
  if (RM <> Pi) and (RM >= 0) and (RM * x + RB <= -y) then R := True;
  if (RM <> Pi) and (RM < 0) and (RM * x + RB >= -y) then R := True;
  if (RM = Pi) and (x < x2) then R := True;
  if (LM <> Pi) and (LM >= 0) and (LM * x + LB >= -y) then L := True;
  if (LM <> Pi) and (LM < 0) and (LM * x + LB <= -y) then L := True;
  if (LM = Pi) and (x > x1) then L := True;
  if U and D and L and R then Result := True;
end;
}

(*
Sine
~~~~

.. code-block:: pascal

    function Sine(degrees: Integer): Extended;

Return the sin of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (sine(0) = 0) then
      WriteLn('Yay! We made maths!');

*)
function Sine(Degrees: Integer): Extended;
begin
  Result := sinearray[Trunc(FixD(Degrees))];
end;

(*
Cose
~~~~

.. code-block:: pascal

    function Cose(degrees: Integer): Extended;

Return the cos of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (Cose(0) = 1) then
      WriteLn('Yay! We made more maths!');

*)
function Cose(Degrees: Integer): Extended;
begin
  Result := cosearray[Trunc(FixD(Degrees))];
end;

(*
GridCoords16Ex
~~~~~~~~~~~~~~

.. code-block:: pascal

    Function GridCoords16Ex(Xmod, Ymod: integer; Grid16: TPoint): TPoint;

Using a grid system based off MiniMap size to return grid position on MainScreen.
This is used in MMtoMS as well as other Grid functions.
Why the number 16?  Original grid is based off a tile, and this splits one tile
into a 4x4 hence 16.

.. note::

    by Narcle

Example:

.. code-block:: pascal

    Example: see MMtoMSEx

*)

Function GridCoords16Ex(Xmod, Ymod: integer; Grid16: TPoint): TPoint;
var
  Yh, yM, X, Y: Extended;
begin
  X := Grid16.x+0.0;
  Y := Grid16.y+0.0;
  yM := 36.0;
  Yh := Abs(Y + yM);
  Result.x := Round( (263.5+Xmod) + (X*9.75/(12.8-(Yh/yM*3.15))) * 9.75);
  Result.y := Round( (182.0+Ymod) + Y * (6.3 + ((Yh/yM)*2.4)));
  if not pointInBox(Result, intToBox(MSX1,MSY1,MSX2,MSY2)) then
    Result := Point(-1, -1);
end;

(*
GetGridAbstractBox
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    Function GetGridAbstractBox(Grid: TPoint): TPointArray;

Returns TPointArray of points for grid tile to use InAbstractBox in GetGridPos

.. note::

    by Narcle

Example:

.. code-block:: pascal


*)
Function GetGridAbstractBox(Grid: TPoint): TPointArray;
var
  T: TPoint;
  i: integer;
begin
  T := Point(Grid.x*4, Grid.y*4);
  Result := [GridCoords16Ex(0, 0, Point(T.x-2, T.y-2)), GridCoords16Ex(0, 0, Point(T.x+1, T.y-2)),
          GridCoords16Ex(0, 0, Point(T.x+1, T.y+1)), GridCoords16Ex(0, 0, Point(T.x-2, T.y+1))];
  for i := 0 to 3 do
    if Result[i].x = -1 then
    begin
      Result := [Point(-1,-1), Point(-1,-1), Point(-1,-1), Point(-1,-1)];
      Exit;
    end;
end;

(*
GetGridPos
~~~~~~~~~~

.. code-block:: pascal

    function GetGridPos(MS: TPoint): TPoint;

Given a MainScreen point it'll return the GridTile position the point is in.
If it fails result is Point(-100, -100), because it can return negative grid
points.

.. note::

    by Narcle

Example:

.. code-block:: pascal


*)
function GetGridPos(MS: TPoint): TPoint;
var
  x, y: integer;
  TPA: TPointArray;
begin
  Result := Point(-100, -100); //fail point
  for x := -8 to 8 do
   for y := -8 to 5 do
   begin
     TPA := GetGridAbstractBox(Point(x,y));
     if TPA[0].x = -1 then
       Continue;
     if InAbstractBox(TPA[0].x, TPA[0].y, TPA[1].x, TPA[1].y, TPA[2].x, TPA[2].y, TPA[3].x, TPA[3].y, MS.x, MS.y) then
     begin
       Result := Point(x, y);
       Exit;
     end;
   end;
end;

(*
GridCoords
~~~~~~~~~~

.. code-block:: pascal

    function GridCoords(GridPoint: TPoint): TPoint;

Returns grid point Main Screen position. (middle of tile)

.. note::

    by Narcle

Example:

.. code-block:: pascal


*)
function GridCoords(GridPoint: TPoint): TPoint;
var
  Yh: Extended;
begin
  Yh := Abs((GridPoint.y+0.0) + 6.0);
  Result.x := Round(259.5 + ((GridPoint.x+1.0)*38.0/(45.7-(Yh/9.0*12.8))) * 38.0);
  Result.y := Round(178.5 + (GridPoint.y+0.0) * (36.0 + ((GridPoint.y+0.0)*37.0)/25.0));
  if not PointInBox(Result, intToBox(MSX1,MSY1,MSX2,MSY2)) then
    Result := Point(-1, -1);
end;

(*
MMToMSEx
~~~~~~~~

.. code-block:: pascal

    Function MMtoMSEx(Xmod, Ymod: integer; MM: TPoint): TPoint;

Turns a Minimap point into a close MS point. New one compensates for angles.
Xmod and Ymod change the starting point on MainScreen.  Ymod = -30 would
raise the points on screen by 30 pixels. This is good if you know the
Height of the npc or object your looking for on MS.
Formula in GridCoords16Ex now.

.. note::

    by Narcle

Example:

.. code-block:: pascal

    FindTreeOnMinimap(x, y);
    msPoint := MMToMSEx(0, -20, Point(x,y));
    MMouse(msPoint.x, msPoint.y, 0, 0);
    //...

*)
Function MMtoMSEx(Xmod, Ymod: integer; MM: TPoint): TPoint;
begin
  Result := GridCoords16Ex(Xmod, Ymod, Point(MM.x-MMCX, MM.y-MMCY));
end;


(*
MMToMS
~~~~~~

.. code-block:: pascal

    function MMToMS(MM: TPoint): TPoint;

Refer to MMtoMSEx - Ymod shift required to be backward compatible

.. note::

    by Narcle

Example:

.. code-block:: pascal


*)
Function MMtoMS(MM: TPoint): TPoint;
begin
  Result := MMtoMSEx(0, -20, MM);
end;

(*
DeleteValueInStrArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInStrArray(var Arr: TStringArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" string array. Maintains current order.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInStrArray(var Arr: TStringArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInIntArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInIntArray(var Arr: TIntegerArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" Integer array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInIntArray(var Arr: TIntegerArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInFloatArray
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInFloatArray(var Arr: TExtendedArray; ValuePosition: Integer);


Deletes value with ValuePosition in "Arr" Float array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInFloatArray(var Arr: TExtendedArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInBoolArray
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInBoolArray(var Arr: TBooleanArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" Boolean array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInBoolArray(var Arr: array of boolean; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInTPA
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInTPA(var Arr: TPointArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" TPointArray.

.. note::

    by EvilChicken! & Coh3n

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInTPA(var Arr: TPointArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    tSwap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInATPA
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInATPA(var Arr: T2DPointArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" T2DPointArray.

.. note::

    by EvilChicken! & Coh3n

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInATPA(var Arr: T2DPointArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    tpaSwap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
GroupDigits
~~~~~~~~~~~

.. code-block:: pascal

    function GroupDigits(n: integer; token: String): String;

Nicely formats the number passed by placing *token* in between groups of three
numbers.

.. note::

    by PriSoner and Nava2

Example:

.. code-block:: pascal

    foo := GroupDigits(1000, ','); // foo -> '1,000'
    bar := GroupDigits(1500423, ' '); // bar -> '1 500 423'

*)

function GroupDigits(n: integer; token: String): String;
var
  b: integer;
begin
  Result := IntToStr(n);

  b := length(Result) + 1;
  if (b > 3) then
  repeat
    b := b - 3;
    if (b > 1) then
      insert(token, Result, b);
  until (b < 3);
end;

(*
GridBox
~~~~~~~

.. code-block:: pascal

    function GridBox(slot, columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBox;

Returns a TBox of the slot 'slot' in a grid created by the other parameters.
Slots start with 1 being the top left of the grid, and counting accross.
    * columns: number of columns in the grid
    * rows: number of rows in the grid
    * w: the width of each box in the grid
    * h: the height of each box in the grid
    * diffX: pixels from center to center (x)
    * diffY: pixels from center to center (y)
    * starTPoint: the center point of the top left box in the grid

.. note::

    | Author: Coh3n
    | Last Modified: Jan. 25th, 2012 by Coh3n

Example:

.. code-block:: pascal

    result := GridBox(Slot, 4, 2, 95, 80, 0, 150, point(110, 100));
*)
function GridBox(slot, columns, rows, w, h, diffX, diffY: integer; startPoint: TPoint): TBox;
begin
  if (slot > (columns * rows)) then
  begin
    writeln('GridBox: Invalid slot: '+toStr(slot));
    exit;
  end;

  result.x1 := (startPoint.x + (((slot - 1) mod columns) * diffX) - (w div 2));
  result.y1 := (startPoint.y + (((slot - 1) div columns) * diffY) - (h div 2));
  result.x2 := (result.x1 + w);
  result.y2 := (result.y1 + h);
end;

(*
Grid
~~~~

.. code-block:: pascal

    function Grid(columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBoxArray;

Returns a grid of TBoxes (see GridBox for parameters).

.. note::

    | Author: Coh3n
    | Last Modified: Jan. 25th, 2012 by Coh3n

Example:

.. code-block:: pascal

    SMART_DrawBoxes(false, Grid(5, 10, 20, 20, 25, 25, point(30, 30)), clYellow);
*)
function Grid(columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBoxArray;
var
  i: integer;
begin
  setLength(result, (columns * rows));

  for i := 0 to high(result) do
    result[i] := GridBox(i + 1, columns, rows, w, h, diffX, diffY, starTPoint);
end;

(*
TPABetweenPoints
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPABetweenPoints(P1, P2: TPoint; Interval, Rand: Integer): TPointArray;

Generates a TPA between P1 and P2, Interval between points; Rand randomness
on each point. Very useful for generating a random walking path between the
player's position and the ending position.

.. note::

    | Author: Nava2
    | Last Modified: Apr. 4thth, 2012 by Coh3n

Example:

.. code-block:: pascal

    newTPA := TPABetweenPoints(PlayerPos, EndPos, 25, 10);
*)
function TPABetweenPoints(P1, P2: TPoint; Interval, Rand: Integer): TPointArray;
var
  hyp, xR, yR: Extended;
  l: Integer;
begin
  // set Result Length and first point at initial Point
  SetLength(Result, Ceil(Distance(P1.X, P1.y, P2.X, P2.Y) * 1.0 / Interval) + 1);
  Result[0] := P1;

  // if no need for intermediate Points then nvm. :)
  if (Distance(P1.X, P1.Y, P2.X, P2.Y) <= Interval) then
  begin
    Result[High(Result)] := P2;
    Exit;
  end;

  // ratios for 'Similar Triangles' maths
  hyp := Hypot(P1.X - P2.x, P1.Y - P2.Y);
  xR := (P2.X - P1.X) / hyp;
  yR := (P2.Y - P1.Y) / hyp;

  // set points
  for l := High(Result) - 1 downto 1 do
  begin
    Result[l].X := Round(P1.X + l * Interval * xR) + RandomRange(-Rand, Rand);
    Result[l].Y := Round(P1.Y + l * Interval * yR) + RandomRange(-Rand, Rand);
  end;

  // last point is tT
  Result[High(Result)] := P2;
end;
