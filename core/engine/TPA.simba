{
===
TPA
===
}
{$loadlib AND_TPA}

function TPointArray.midPnt(): TPoint;
var
  mPnt: TPoint;
begin
  if Length(Self) < 1 then
    Exit;

  mPnt := middleTPA(Self);
  sortTPAFrom(Self, mPnt);

  Result:= Self[0];
end;

function TPointArray.getBounds(): TBox;
var
  mPnt: TPoint;
begin
  if Length(Self) < 1 then
    Exit;
  Result:= getTPABounds(Self);
end;

function pointsMatch(Pnt1, Pnt2: TPoint): Boolean;
begin
  result := ((Pnt1.X = Pnt2.X) and (Pnt1.Y = Pnt2.Y));
end;

function TPADelete(var TPA: TPointArray; x: Integer): Boolean;
var
  i, h: Integer;
begin
  h := High(TPA);
  Result := ((x <= h) and (x > -1));
  if not Result then
    Exit;
  for i := x to (h - 1) do
    TPA[i] := TPA[(i + 1)];
  SetLength(TPA, h);
end;

function safePnts(TPA: TPointArray): TPointArray;
var
  i,l  : integer;
  ctpa : TPointArray;
begin
  if length(TPA) < 1 then
    exit;

  for i:=0 to high(TPA) do
    if not PointInBox(TPA[i], intToBox(0,0,764,502)) then
      TPADelete(TPA, i);
end;

function TPointArray.foundInBox(Box: TBox): Boolean;
var
  i : Integer;
begin
  if length(self) < 1 then
    exit(false);

  for i:=0 to high(self) do
    if pointInBox(self[i], Box) then
      exit(true);
end;
